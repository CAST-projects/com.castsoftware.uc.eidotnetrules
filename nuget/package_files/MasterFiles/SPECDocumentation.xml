<?xml version="1.0" encoding="utf-8"?>
<root>
  <metric id="61018" type="technical-criterion" originalName="Efficiency - Memory, Network and Disk Space Management" section="name">
    <english>Efficiency - Memory, Network and Disk Space Management</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="description">
    <english>This rule will check whether local variables are shadowing class fields.

In case of C#, classes as well as structs are considered.
In case of Visual Basic, modules also considered in addition to classes.

In case of classes, only non-private fields of Base classes are considered.</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="name">
    <english>Avoid local variables shadowing class fields</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code
- Bookmark to field that is being shadowed</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="rationale">
    <english>Both overriding or shadowing a class field (typically non-private)  can strongly impact the readability, and therefore the maintainability, of a piece of code.</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="reference">
    <english>CERT, DCL01-C. - Do not reuse variable names in subscopes
CERT, DCL51-J. - Do not shadow or obscure identifiers in subscopes</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="remediation">
    <english>Ensure you have an explicit way, usually in form of naming conventions, to name your local variable to avoid conflict with class fields.</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="remediationSample">
    <english>// Field Shadowing

class MyVector {
  private int val = 1;
  private void doLogic() {
    int newValue;
    //...
  }
}

// Variable Shadowing

class MyVector {
  private void doLogic() {
    for (int i = 0; i &lt; 10; i++) {/* ... */}
    for (int i = 0; i &lt; 20; i++) {/* ... */}
  }
}</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="sample">
    <english>// Field Shadowing

class MyVector {
  private int val = 1;
  private void doLogic() {
    int val;
    //...
  }
}

// Variable shadowing

class MyVector {
  private int i = 0;
  private void doLogic() {
    for (i = 0; i &lt; 10; i++) {/* ... */}
    for (int i = 0; i &lt; 20; i++) {/* ... */}
  }
}</english>
  </metric>
  <metric id="2000000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="total">
    <english>Number of Methods</english>
  </metric>
  <metric id="2000002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="description">
    <english>This QR will check whether child class fields shadow parent class fields. The check is irrespective of field type and case-sensitivity.</english>
  </metric>
  <metric id="2000002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="name">
    <english>Child class fields should not shadow parent class fields</english>
  </metric>
  <metric id="2000002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="rationale">
    <english>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best, chaos at worst.</english>
  </metric>
  <metric id="2000002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="reference">
    <english>https://rules.sonarsource.com/csharp/RSPEC-2387</english>
  </metric>
  <metric id="2000002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="remediationSample">
    <english>public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripened;
  private static Color FLESH_COLOR;
}</english>
  </metric>
  <metric id="2000002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="sample">
    <english>public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripe; // Noncompliant
  private static Color FLESH; // Noncompliant
}</english>
  </metric>
  <metric id="2000004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="description">
    <english>This rule raises an issue when a private method in an unsealed type has a signature that is identical to a public method declared in a base type.</english>
  </metric>
  <metric id="2000004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="name">
    <english>Inherited member visibility should not be decreased</english>
  </metric>
  <metric id="2000004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="rationale">
    <english>Changing an inherited member to private will not prevent access to the base class implementation</english>
  </metric>
  <metric id="2000004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="reference">
    <english>https://rules.sonarsource.com/csharp/RSPEC-4015</english>
  </metric>
  <metric id="2000004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="remediationSample">
    <english>using System;

namespace MyLibrary
{
  public class Foo
  {
    public void SomeMethod(int count) { }
  }
  public sealed class Bar : Foo
  {
    private void SomeMethod(int count) { }
  }
}</english>
  </metric>
  <metric id="2000004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="sample">
    <english>using System;

namespace MyLibrary
{
  public class Foo
  {
    public void SomeMethod(int count) { }
  }
  public class Bar:Foo
  {
    private void SomeMethod(int count) { } // Noncompliant
  }
}</english>
  </metric>
  <metric id="2000006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="description">
    <english>This rule will check the use of FIXME tags in comment for method and classes. All comments, single line and multi-line, are considered that have "FIXME" (case insensitive) at the start of the comment.</english>
  </metric>
  <metric id="2000006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="name">
    <english>Track "FIXME" tags</english>
  </metric>
  <metric id="2000006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="rationale">
    <english>FIXME tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.

Sometimes the developer will not have the time or will simply forget to get back to that tag.

This rule is meant to track those tags and to ensure that they do not go unnoticed.</english>
  </metric>
  <metric id="2000006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="reference">
    <english>MITRE, CWE-546 - Suspicious Comment</english>
  </metric>
  <metric id="2000006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="remediation">
    <english>Fix the issues in code and remove "FIXME" tags.</english>
  </metric>
  <metric id="2000006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="sample">
    <english>private int Divide(int numerator, int denominator)
{
    return numerator / denominator;  // FIXME denominator value might be  0
}</english>
  </metric>
  <metric id="2000006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2000008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="description">
    <english>This rule will check the use of TODO tags in comment for method and classes. All comments, single line and multi-line, are considered that have "TODO" (case insensitive) at the start of the comment.</english>
  </metric>
  <metric id="2000008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="name">
    <english>Track "TODO" tags</english>
  </metric>
  <metric id="2000008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="rationale">
    <english>TODO tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.

Sometimes the developer will not have the time or will simply forget to get back to that tag.

This rule is meant to track those tags and to ensure that they do not go unnoticed.</english>
  </metric>
  <metric id="2000008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="reference">
    <english>MITRE, CWE-546 - Suspicious Comment</english>
  </metric>
  <metric id="2000008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="remediation">
    <english>Complete remaining tasks and remove "TODO" tags.</english>
  </metric>
  <metric id="2000008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="sample">
    <english>private void DoSomething()
{
  // TODO
}</english>
  </metric>
  <metric id="2000008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="description">
    <english>This rule raises an issue when a unsealed, public or protected class implements IEquatable&lt;T&gt; and the Equals is neither virtual nor abstract.</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="name">
    <english>Classes implementing "IEquatable&lt;T&gt;" should be sealed</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="rationale">
    <english>When a class implements the IEquatable&lt;T&gt; interface, it enters a contract that, in effect, states "I know how to compare two instances of type T or any type derived from T for equality.". However if that class is derived, it is very unlikely that the base class will know how to make a meaningful comparison. Therefore that implicit contract is now broken.

Alternatively IEqualityComparer&lt;T&gt; provides a safer interface and is used by collections or Equals could be made virtual.</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="reference">
    <english>https://msdn.microsoft.com/en-us/library/ms132151(v=vs.110).aspx
https://rules.sonarsource.com/csharp/RSPEC-4035</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="remediation">
    <english>Make class sealed or use IEqualityComparer&lt;T&gt; instead.</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="remediationSample">
    <english>using System;

namespace MyLibrary
{
    public sealed class Foo : IEquatable&lt;Foo&gt;
    {
        public bool Equals(Foo other)
        {
            // Your code here
        }
    }
}</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="sample">
    <english>using System;

namespace MyLibrary
{
  class Base : IEquatable&lt;Base&gt; // Noncompliant
  {
    bool Equals(Base other)
    {
      if (other == null) { return false };
      // do comparison of base properties
    }

    override bool Equals(object other)  =&gt; Equals(other as Base);
  }

  class A : Base
  {
    bool Equals(A other)
    {
      if (other == null) { return false };
      // do comparison of A properties
      return base.Equals(other);
    }

    override bool Equals(object other)  =&gt; Equals(other as A);
  }

  class B : Base
  {
    bool Equals(B other)
    {
      if (other == null) { return false };
      // do comparison of B properties
     return base.Equals(other);
    }

    override bool Equals(object other)  =&gt; Equals(other as B);
  }

  static void Main() {
    A a = new A();
    B b = new B();

    Console.WriteLine(a.Equals(b)); // This calls the WRONG equals. This causes Base::Equals(Base)
    //  to be called which only compares the properties in Base and ignores the fact that
    // a and b are different types. In the working example A::Equals(Object) would have been
    // called and Equals would return false because it correctly recognizes that a and b are
    // different types. If a and b have the same base properties they will  be returned as equal.
  }
}</english>
  </metric>
  <metric id="2000010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="total">
    <english>Number of Classes</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="description">
    <english>This rule will verify that methods\properties that return arrays\collections do not return null.</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="name">
    <english>Empty arrays and collections should be returned instead of null</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="rationale">
    <english>Returning null instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.

Moreover, in many cases, null is used as a synonym for empty.</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="reference">
    <english>CERT, MSC19-C. - For functions that return an array, prefer returning an empty array over a null value
CERT, MET55-J. - Return an empty array or collection instead of a null value for methods that return an array or collection</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="remediation">
    <english>Return empty array\collection.</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="remediationSample">
    <english>public Result[] GetResults()
{
    return new Result[0];
}

public IEnumerable&lt;Result&gt; GetResults()
{
    return Enumerable.Empty&lt;Result&gt;();
}

public IEnumerable&lt;Result&gt; GetResults() =&gt; Enumerable.Empty&lt;Result&gt;();

public IEnumerable&lt;Result&gt; Results
{
    get
    {
        return Enumerable.Empty&lt;Result&gt;();
    }
}

public IEnumerable&lt;Result&gt; Results =&gt; Enumerable.Empty&lt;Result&gt;();</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="sample">
    <english>public Result[] GetResults()
{
    return null; // Noncompliant
}

public IEnumerable&lt;Result&gt; GetResults()
{
    return null; // Noncompliant
}

public IEnumerable&lt;Result&gt; GetResults() =&gt; null; // Noncompliant

public IEnumerable&lt;Result&gt; Results
{
    get
    {
        return null; // Noncompliant
    }
}

public IEnumerable&lt;Result&gt; Results =&gt; null; // Noncompliant</english>
  </metric>
  <metric id="2000012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2000014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="description">
    <english>This rule will check whether variable of interface type is converted into concrete type. Struct and Class are considered as Concrete type.

Note: Abstract classes are not considered as concrete classes.</english>
  </metric>
  <metric id="2000014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="name">
    <english>Interface instances should not be cast to concrete types</english>
  </metric>
  <metric id="2000014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="rationale">
    <english>Needing to cast from an interface to a concrete type indicates that something is wrong with the abstraction in use, likely that something is missing from the interface. Instead of casting to a discrete type, the missing functionality should be added to the interface. Otherwise there is a risk of runtime exceptions.</english>
  </metric>
  <metric id="2000014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="remediation">
    <english>Remove the cast.</english>
  </metric>
  <metric id="2000014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="sample">
    <english>public interface IMyInterface
{
  void DoStuff();
}

public class MyClass1 : IMyInterface
{
  public int Data { get { return new Random().Next(); } }

  public void DoStuff()
  {
    // TODO...
  }
}

public static class DowncastExampleProgram
{
  static void EntryPoint(IMyInterface interfaceRef)
  {
    MyClass1 class1 = (MyClass1)interfaceRef;  // Noncompliant
    int privateData = class1.Data;

    class1 = interfaceRef as MyClass1;  // Noncompliant
    if (class1 != null)
    {
      // ...
    }
  }
}</english>
  </metric>
  <metric id="2000014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="description">
    <english>The rule will raise a violation in case of event raising when:
1. NULL is passed as sender when raising an non-static event
2. NULL is passed as event data when raising an event</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="name">
    <english>Ensure proper arguments to Events</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="rationale">
    <english>With respect to guidelines from MSDN the following rules must be followed when raising events:

1. DO NOT pass null as the event data parameter when raising an event.
2. DO NOT pass null as the sender when raising a non-static event.

It prevents a null reference exception should a method try and do something with the arguments.</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="reference">
    <english>https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event?redirectedfrom=MSDN</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="remediation">
    <english>You should pass EventArgs.Empty if you don’t want to pass any data to the event-handling method. Developers expect this parameter not to be null.</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="remediationSample">
    <english>class AClass {
   public event EventHandler foo;

   protected virtual void OnTfoo(EventArgs e)
   {
       foo?.Invoke(this, e); // Compliant
   }
}</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="sample">
    <english>class AClass {
   public event EventHandler foo;

   protected virtual void OnTfoo(EventArgs e)
   {
       foo?.Invoke(null, e); // Noncompliant
   }
}</english>
  </metric>
  <metric id="2000016" type="quality-rule" originalName="Ensure proper arguments to Events" section="total">
    <english>Number of methods</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="description">
    <english>This rule will check the use of Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName methods</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="name">
    <english>Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="rationale">
    <english>The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the Load(Byte[], Byte[], SecurityContextSource) method.</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="reference">
    <english>https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.loadfrom?view=netcore-3.1
https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.loadfile?view=netcore-3.1
https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.loadwithpartialname?view=netcore-3.1</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="remediation">
    <english>Always use Assembly.Load as main method to load DLL.</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="remediationSample">
    <english>static void Main(string[] args)
{
    Assembly.Load(...); // NO VIOLATION
}</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="sample">
    <english>static void Main(string[] args)
{
    Assembly.LoadFrom(...); // VIOLATION
    Assembly.LoadFile(...); // VIOLATION
    Assembly.LoadWithPartialName(...); // VIOLATION
}</english>
  </metric>
  <metric id="2000018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="total">
    <english>Number of methods and fields and properties initialized using a lambda function</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="description">
    <english>This rule will check if synchronous task could be distinguished as Async or Sync based on name i.e. if async/sync suffixes are used in such methods as expected.</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="name">
    <english>Avoid methods named without following synchronous/asynchronous convention</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="rationale">
    <english>According to the Task-based Asynchronous Pattern (TAP), methods returning either a System.Threading.Tasks.Task or a System.Threading.Tasks.Task&lt;TResult&gt; are considered asynchronous. Such methods should use the Async suffix. Conversely methods which do not return such Tasks should not have an "Async" suffix.</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="reference">
    <english>https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="remediation">
    <english>Ensure your methods name are following synchronous/asynchronous convention.</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="remediationSample">
    <english>using System.Threading;
using System.Threading.Tasks;

namespace theLibrary
{

  public class theClass
  {
    public Task ReadAsync(byte [] buffer, int offset, int count, CancellationToken cancellationToken) // fixed violation
    {
       // source code
    }

    public int Read() { // fixed violation
       return 0;
    }

  }
}</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="sample">
    <english>using System.Threading;
using System.Threading.Tasks;

namespace theLibrary
{

  public class theClass
  {
    public Task Read(byte [] buffer, int offset, int count, CancellationToken cancellationToken)  // violation
    {
       // source code
    }

    public int ReadAsync() { // violation
       return 0;
    }
  }
}</english>
  </metric>
  <metric id="2000020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="total">
    <english>Number of methods</english>
  </metric>
  <metric id="2000022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="description">
    <english>This rule will raise violations if string.ToLower(), ToUpper, IndexOf, LastIndexOf, and Compare do not specify culture argument or CompareTo is called.</english>
  </metric>
  <metric id="2000022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="name">
    <english>Culture Dependent String operations should specify culture</english>
  </metric>
  <metric id="2000022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="rationale">
    <english>Calls without a culture may work fine in the system's "home" environment, but break in ways that are extremely difficult to diagnose for customers who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them.</english>
  </metric>
  <metric id="2000022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="reference">
    <english>https://wiki.sei.cmu.edu/confluence/display/java/STR02-J.+Specify+an+appropriate+locale+when+comparing+locale-dependent+data</english>
  </metric>
  <metric id="2000022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="remediation">
    <english>Use Culture argument or use culture invariant version. In case of CompareTo, CompareOrdinal, or Compare with culture.</english>
  </metric>
  <metric id="2000022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="remediationSample">
    <english>var lowered = someString.ToLower(CultureInfo.InvariantCulture);

-or-

var lowered = someString.ToLowerInvariant();</english>
  </metric>
  <metric id="2000022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="sample">
    <english>var lowered = someString.ToLower(); //Noncompliant</english>
  </metric>
  <metric id="2000022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2000024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="description">
    <english>This rule checks for fields that are public static of type System.Array or System.Collections.Generic.ICollection&lt;T&gt; and are not read-only.</english>
  </metric>
  <metric id="2000024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="name">
    <english>Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static</english>
  </metric>
  <metric id="2000024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="rationale">
    <english>If field is static and public and not read-only, it can affect every class that uses them. This can lead to unexpected behavior.</english>
  </metric>
  <metric id="2000024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="remediation">
    <english>Make visibility of fields protected\private or make them of type Immutable\read-only. This can done through:
- make fields read-only (with inline initialization)
- is of type 
      System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;
      System.Collections.ObjectModel.ReadOnlyDictionary&lt;TKey, TValue&gt;
      System.Collections.Immutable.IImmutableArray&lt;T&gt;
      System.Collections.Immutable.IImmutableDictionary&lt;TKey, TValue&gt;
      System.Collections.Immutable.IImmutableList&lt;T&gt;
      System.Collections.Immutable.IImmutableSet&lt;T&gt;
      System.Collections.Immutable.IImmutableStack&lt;T&gt;
      System.Collections.Immutable.IImmutableQueue&lt;T&gt;</english>
  </metric>
  <metric id="2000024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="remediationSample">
    <english>public class A
{
  protected static string[] strings1 = {"first","second"};
  protected static List&lt;String&gt; strings3 = new List&lt;String&gt;();
  // ...
}</english>
  </metric>
  <metric id="2000024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="sample">
    <english>public class A
{
  public static string[] strings1 = {"first","second"};  // Noncompliant
  public static List&lt;String&gt; strings3 = new List&lt;String&gt;();  // Noncompliant
  // ...
}</english>
  </metric>
  <metric id="2000024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2000026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="description">
    <english>This rule will check whether an exception type object is created but not thrown.</english>
  </metric>
  <metric id="2000026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="name">
    <english>Avoid creating exception without throwing them</english>
  </metric>
  <metric id="2000026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="rationale">
    <english>Only creating exception and throwing it would mean that either it is a mistake or it is used for side effect of object creation.</english>
  </metric>
  <metric id="2000026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="remediation">
    <english>Throw the exception or remove the statement</english>
  </metric>
  <metric id="2000026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="remediationSample">
    <english>var o = new Exception();

throw o;

throw new Exception();</english>
  </metric>
  <metric id="2000026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="sample">
    <english>var e = new Exception();

new Exception();</english>
  </metric>
  <metric id="2000026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2000028" type="quality-rule" originalName="Use Logical OR instead of Bitwise OR in boolean context" section="description">
    <english>This rule will check whether bitwise OR (|) is used instead of Logical OR (||) in boolean context.</english>
  </metric>
  <metric id="2000028" type="quality-rule" originalName="Use Logical OR instead of Bitwise OR in boolean context" section="name">
    <english>Use Logical OR instead of Bitwise OR in boolean context</english>
  </metric>
  <metric id="2000028" type="quality-rule" originalName="Use Logical OR instead of Bitwise OR in boolean context" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000028" type="quality-rule" originalName="Use Logical OR instead of Bitwise OR in boolean context" section="rationale">
    <english>When Bitwise OR is used instead of Logical OR in boolean context, it is most probably a mistake or it is intended for side effect which is incorrect programming practice.</english>
  </metric>
  <metric id="2000028" type="quality-rule" originalName="Use Logical OR instead of Bitwise OR in boolean context" section="remediation">
    <english>Use Logical OR</english>
  </metric>
  <metric id="2000028" type="quality-rule" originalName="Use Logical OR instead of Bitwise OR in boolean context" section="remediationSample">
    <english>Class AClass {
      private int Return1() {
         return 1;
      }

      private int Return0() {
         return 0;
      }

      public void Test() {
         bool b1 = false;
         bool b2 = true;
         var x = b1 || b2;
         x = ReturnFalse() || ReturnTrue();
     }
}</english>
  </metric>
  <metric id="2000028" type="quality-rule" originalName="Use Logical OR instead of Bitwise OR in boolean context" section="sample">
    <english>Class AClass {
      private int Return1() {
         return 1;
      }

      private int Return0() {
         return 0;
      }

      public void Test() {
         bool b1 = false;
         bool b2 = true;
         var x = b1 | b2;
         x = ReturnFalse() | ReturnTrue();
     }
}</english>
  </metric>
  <metric id="2000028" type="quality-rule" originalName="Use Logical OR instead of Bitwise OR in boolean context" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2000030" type="quality-rule" originalName="Conditional structures should not have identical branches" section="description">
    <english>This QR will raise violation if all the branches in a given conditional statement has same content. switch with default label, if and ternary operators are considered for inspection.</english>
  </metric>
  <metric id="2000030" type="quality-rule" originalName="Conditional structures should not have identical branches" section="name">
    <english>Conditional structures should not have identical branches</english>
  </metric>
  <metric id="2000030" type="quality-rule" originalName="Conditional structures should not have identical branches" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000030" type="quality-rule" originalName="Conditional structures should not have identical branches" section="rationale">
    <english>Having identical statements in all branches would mean it is likely a mistake. Either it needs to be inspected and changed or conditional statement needs to be removed.</english>
  </metric>
  <metric id="2000030" type="quality-rule" originalName="Conditional structures should not have identical branches" section="remediation">
    <english>Inspect conditional statement and change or remove conditional statement.</english>
  </metric>
  <metric id="2000030" type="quality-rule" originalName="Conditional structures should not have identical branches" section="sample">
    <english>Class Test {
   public TestAll() {
         int i1 = 1;
         var x = false;

         if (true == x) {
            ReturnTrue();
         }
         else if (1 == i1) {
            ReturnTrue();
         }
         else {
            ReturnTrue();
         }



         switch (i) {
            case 1:
               i++;
               break;
            case 2:
               //differs only by comment
               i++;
               break;
            default:
               /*default*/
               i++;
               break;
         }

         i = 0 == i ? ++i : ++i;
   }

}</english>
  </metric>
  <metric id="2000030" type="quality-rule" originalName="Conditional structures should not have identical branches" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2000032" type="quality-rule" originalName="Avoid empty finalisers" section="description">
    <english>The rule will raise a violation when a type implements a finalizer that is empty. Even finalizer with only statement with calls to Debug.Fail and it is not in #if DEBUG part, it will be considered as violation since Debug.Fail is omitted for non-DEBUG configuration.</english>
  </metric>
  <metric id="2000032" type="quality-rule" originalName="Avoid empty finalisers" section="name">
    <english>Avoid empty finalisers</english>
  </metric>
  <metric id="2000032" type="quality-rule" originalName="Avoid empty finalisers" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2000032" type="quality-rule" originalName="Avoid empty finalisers" section="rationale">
    <english>Whenever you can, avoid finalizers because of the additional performance overhead that's involved in tracking object lifetime. The garbage collector runs the finalizer before it collects the object. This means that at least two collections are required to collect the object. An empty finalizer incurs this added overhead without any benefit.</english>
  </metric>
  <metric id="2000032" type="quality-rule" originalName="Avoid empty finalisers" section="reference">
    <english>https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1821

https://cwe.mitre.org/data/definitions/1069.html</english>
  </metric>
  <metric id="2000032" type="quality-rule" originalName="Avoid empty finalisers" section="remediation">
    <english>Avoid using empty finalizers</english>
  </metric>
  <metric id="2000032" type="quality-rule" originalName="Avoid empty finalisers" section="sample">
    <english>public class Class1
    {
        // Violation occurs because the finalizer is empty.
        ~Class1()
        {
        }
    }

    public class Class2
    {
        // Violation occurs because Debug.Fail is a conditional method.
        // The finalizer will contain code only if the DEBUG directive
        // symbol is present at compile time. When the DEBUG
        // directive is not present, the finalizer will still exist, but
        // it will be empty.
        ~Class2()
        {
            Debug.Fail("Finalizer called!");
        }
    }</english>
  </metric>
  <metric id="2000032" type="quality-rule" originalName="Avoid empty finalisers" section="total">
    <english>Number of finalizers</english>
  </metric>
</root>