<?xml version="1.0" encoding="utf-8"?>
<root>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="description">
    <english>This rule will check whether local variables are shadowing class fields.

In case of C#, classes as well as structs are considered.
In case of Visual Basic, modules also considered in addition to classes.

In case of classes, only non-private fields of Base classes are considered.</english>
  </metric>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="name">
    <english>Avoid local variables shadowing class fields</english>
  </metric>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code
- Bookmark to field that is being shadowed</english>
  </metric>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="rationale">
    <english>Both overriding or shadowing a class field (typically non-private)  can strongly impact the readability, and therefore the maintainability, of a piece of code.</english>
  </metric>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="reference">
    <english>CERT, DCL01-C. - Do not reuse variable names in subscopes
CERT, DCL51-J. - Do not shadow or obscure identifiers in subscopes</english>
  </metric>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="remediation">
    <english>Ensure you have an explicit way, usually in form of naming conventions, to name your local variable to avoid conflict with class fields.</english>
  </metric>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="remediationSample">
    <english>// Field Shadowing

class MyVector {
  private int val = 1;
  private void doLogic() {
    int newValue;
    //...
  }
}

// Variable Shadowing

class MyVector {
  private void doLogic() {
    for (int i = 0; i &lt; 10; i++) {/* ... */}
    for (int i = 0; i &lt; 20; i++) {/* ... */}
  }
}</english>
  </metric>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="sample">
    <english>// Field Shadowing

class MyVector {
  private int val = 1;
  private void doLogic() {
    int val;
    //...
  }
}

// Variable shadowing

class MyVector {
  private int i = 0;
  private void doLogic() {
    for (i = 0; i &lt; 10; i++) {/* ... */}
    for (int i = 0; i &lt; 20; i++) {/* ... */}
  }
}</english>
  </metric>
  <metric id="2200000" type="quality-rule" originalName="Avoid local variables shadowing class fields" section="total">
    <english>Number of Methods</english>
  </metric>
  <metric id="2200002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="description">
    <english>This QR will check whether child class fields shadow parent class fields. The check is irrespective of field type and case-sensitivity.</english>
  </metric>
  <metric id="2200002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="name">
    <english>Child class fields should not shadow parent class fields</english>
  </metric>
  <metric id="2200002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="rationale">
    <english>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best, chaos at worst.</english>
  </metric>
  <metric id="2200002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="reference">
    <english>https://rules.sonarsource.com/csharp/RSPEC-2387</english>
  </metric>
  <metric id="2200002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="remediationSample">
    <english>public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripened;
  private static Color FLESH_COLOR;
}</english>
  </metric>
  <metric id="2200002" type="quality-rule" originalName="Child class fields should not shadow parent class fields" section="sample">
    <english>public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripe; // Noncompliant
  private static Color FLESH; // Noncompliant
}</english>
  </metric>
  <metric id="2200004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="description">
    <english>This rule raises an issue when a private method in an unsealed type has a signature that is identical to a public method declared in a base type.</english>
  </metric>
  <metric id="2200004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="name">
    <english>Inherited member visibility should not be decreased</english>
  </metric>
  <metric id="2200004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="rationale">
    <english>Changing an inherited member to private will not prevent access to the base class implementation</english>
  </metric>
  <metric id="2200004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="reference">
    <english>https://rules.sonarsource.com/csharp/RSPEC-4015</english>
  </metric>
  <metric id="2200004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="remediationSample">
    <english>using System;

namespace MyLibrary
{
  public class Foo
  {
    public void SomeMethod(int count) { }
  }
  public sealed class Bar : Foo
  {
    private void SomeMethod(int count) { }
  }
}</english>
  </metric>
  <metric id="2200004" type="quality-rule" originalName="Inherited member visibility should not be decreased" section="sample">
    <english>using System;

namespace MyLibrary
{
  public class Foo
  {
    public void SomeMethod(int count) { }
  }
  public class Bar:Foo
  {
    private void SomeMethod(int count) { } // Noncompliant
  }
}</english>
  </metric>
  <metric id="2200006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="description">
    <english>This rule will check the use of FIXME tags in comment for method and classes. All comments, single line and multi-line, are considered that have "FIXME" (case insensitive) at the start of the comment.</english>
  </metric>
  <metric id="2200006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="name">
    <english>Track "FIXME" tags</english>
  </metric>
  <metric id="2200006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="rationale">
    <english>FIXME tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.

Sometimes the developer will not have the time or will simply forget to get back to that tag.

This rule is meant to track those tags and to ensure that they do not go unnoticed.</english>
  </metric>
  <metric id="2200006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="reference">
    <english>MITRE, CWE-546 - Suspicious Comment</english>
  </metric>
  <metric id="2200006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="remediation">
    <english>Fix the issues in code and remove "FIXME" tags.</english>
  </metric>
  <metric id="2200006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="sample">
    <english>private int Divide(int numerator, int denominator)
{
    return numerator / denominator;  // FIXME denominator value might be  0
}</english>
  </metric>
  <metric id="2200006" type="quality-rule" originalName="Track &quot;FIXME&quot; tags" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="description">
    <english>This rule will check the use of TODO tags in comment for method and classes. All comments, single line and multi-line, are considered that have "TODO" (case insensitive) at the start of the comment.</english>
  </metric>
  <metric id="2200008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="name">
    <english>Track "TODO" tags</english>
  </metric>
  <metric id="2200008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="rationale">
    <english>TODO tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.

Sometimes the developer will not have the time or will simply forget to get back to that tag.

This rule is meant to track those tags and to ensure that they do not go unnoticed.</english>
  </metric>
  <metric id="2200008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="reference">
    <english>MITRE, CWE-546 - Suspicious Comment</english>
  </metric>
  <metric id="2200008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="remediation">
    <english>Complete remaining tasks and remove "TODO" tags.</english>
  </metric>
  <metric id="2200008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="sample">
    <english>private void DoSomething()
{
  // TODO
}</english>
  </metric>
  <metric id="2200008" type="quality-rule" originalName="Track &quot;TODO&quot; tags" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="description">
    <english>This rule raises an issue when a unsealed, public or protected class implements IEquatable&lt;T&gt; and the Equals is neither virtual nor abstract.</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="name">
    <english>Classes implementing "IEquatable&lt;T&gt;" should be sealed</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="rationale">
    <english>When a class implements the IEquatable&lt;T&gt; interface, it enters a contract that, in effect, states "I know how to compare two instances of type T or any type derived from T for equality.". However if that class is derived, it is very unlikely that the base class will know how to make a meaningful comparison. Therefore that implicit contract is now broken.

Alternatively IEqualityComparer&lt;T&gt; provides a safer interface and is used by collections or Equals could be made virtual.</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="reference">
    <english>https://msdn.microsoft.com/en-us/library/ms132151(v=vs.110).aspx
https://rules.sonarsource.com/csharp/RSPEC-4035</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="remediation">
    <english>Make class sealed or use IEqualityComparer&lt;T&gt; instead.</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="remediationSample">
    <english>using System;

namespace MyLibrary
{
    public sealed class Foo : IEquatable&lt;Foo&gt;
    {
        public bool Equals(Foo other)
        {
            // Your code here
        }
    }
}</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="sample">
    <english>using System;

namespace MyLibrary
{
  class Base : IEquatable&lt;Base&gt; // Noncompliant
  {
    bool Equals(Base other)
    {
      if (other == null) { return false };
      // do comparison of base properties
    }

    override bool Equals(object other)  =&gt; Equals(other as Base);
  }

  class A : Base
  {
    bool Equals(A other)
    {
      if (other == null) { return false };
      // do comparison of A properties
      return base.Equals(other);
    }

    override bool Equals(object other)  =&gt; Equals(other as A);
  }

  class B : Base
  {
    bool Equals(B other)
    {
      if (other == null) { return false };
      // do comparison of B properties
     return base.Equals(other);
    }

    override bool Equals(object other)  =&gt; Equals(other as B);
  }

  static void Main() {
    A a = new A();
    B b = new B();

    Console.WriteLine(a.Equals(b)); // This calls the WRONG equals. This causes Base::Equals(Base)
    //  to be called which only compares the properties in Base and ignores the fact that
    // a and b are different types. In the working example A::Equals(Object) would have been
    // called and Equals would return false because it correctly recognizes that a and b are
    // different types. If a and b have the same base properties they will  be returned as equal.
  }
}</english>
  </metric>
  <metric id="2200010" type="quality-rule" originalName="Classes implementing &quot;IEquatable&lt;T&gt;&quot; should be sealed" section="total">
    <english>Number of Classes</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="description">
    <english>This rule will verify that methods\properties that return arrays\collections do not return null.</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="name">
    <english>Empty arrays and collections should be returned instead of null</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="rationale">
    <english>Returning null instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.

Moreover, in many cases, null is used as a synonym for empty.</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="reference">
    <english>CERT, MSC19-C. - For functions that return an array, prefer returning an empty array over a null value
CERT, MET55-J. - Return an empty array or collection instead of a null value for methods that return an array or collection</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="remediation">
    <english>Return empty array\collection.</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="remediationSample">
    <english>public Result[] GetResults()
{
    return new Result[0];
}

public IEnumerable&lt;Result&gt; GetResults()
{
    return Enumerable.Empty&lt;Result&gt;();
}

public IEnumerable&lt;Result&gt; GetResults() =&gt; Enumerable.Empty&lt;Result&gt;();

public IEnumerable&lt;Result&gt; Results
{
    get
    {
        return Enumerable.Empty&lt;Result&gt;();
    }
}

public IEnumerable&lt;Result&gt; Results =&gt; Enumerable.Empty&lt;Result&gt;();</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="sample">
    <english>public Result[] GetResults()
{
    return null; // Noncompliant
}

public IEnumerable&lt;Result&gt; GetResults()
{
    return null; // Noncompliant
}

public IEnumerable&lt;Result&gt; GetResults() =&gt; null; // Noncompliant

public IEnumerable&lt;Result&gt; Results
{
    get
    {
        return null; // Noncompliant
    }
}

public IEnumerable&lt;Result&gt; Results =&gt; null; // Noncompliant</english>
  </metric>
  <metric id="2200012" type="quality-rule" originalName="Empty arrays and collections should be returned instead of null" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="description">
    <english>This rule will check whether variable of interface type is converted into concrete type. Struct and Class are considered as Concrete type.

Note: Abstract classes are not considered as concrete classes.</english>
  </metric>
  <metric id="2200014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="name">
    <english>Interface instances should not be cast to concrete types</english>
  </metric>
  <metric id="2200014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="rationale">
    <english>Needing to cast from an interface to a concrete type indicates that something is wrong with the abstraction in use, likely that something is missing from the interface. Instead of casting to a discrete type, the missing functionality should be added to the interface. Otherwise there is a risk of runtime exceptions.</english>
  </metric>
  <metric id="2200014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="remediation">
    <english>Remove the cast.</english>
  </metric>
  <metric id="2200014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="sample">
    <english>public interface IMyInterface
{
  void DoStuff();
}

public class MyClass1 : IMyInterface
{
  public int Data { get { return new Random().Next(); } }

  public void DoStuff()
  {
    // TODO...
  }
}

public static class DowncastExampleProgram
{
  static void EntryPoint(IMyInterface interfaceRef)
  {
    MyClass1 class1 = (MyClass1)interfaceRef;  // Noncompliant
    int privateData = class1.Data;

    class1 = interfaceRef as MyClass1;  // Noncompliant
    if (class1 != null)
    {
      // ...
    }
  }
}</english>
  </metric>
  <metric id="2200014" type="quality-rule" originalName="Interface instances should not be cast to concrete types" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="description">
    <english>The rule will raise a violation in case of event raising when:
1. NULL is passed as sender when raising an non-static event
2. NULL is passed as event data when raising an event</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="name">
    <english>Ensure proper arguments to Events</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="rationale">
    <english>With respect to guidelines from MSDN the following rules must be followed when raising events:

1. DO NOT pass null as the event data parameter when raising an event.
2. DO NOT pass null as the sender when raising a non-static event.

It prevents a null reference exception should a method try and do something with the arguments.</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="reference">
    <english>https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event?redirectedfrom=MSDN</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="remediation">
    <english>You should pass EventArgs.Empty if you don’t want to pass any data to the event-handling method. Developers expect this parameter not to be null.</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="remediationSample">
    <english>class AClass {
   public event EventHandler foo;

   protected virtual void OnTfoo(EventArgs e)
   {
       foo?.Invoke(this, e); // Compliant
   }
}</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="sample">
    <english>class AClass {
   public event EventHandler foo;

   protected virtual void OnTfoo(EventArgs e)
   {
       foo?.Invoke(null, e); // Noncompliant
   }
}</english>
  </metric>
  <metric id="2200016" type="quality-rule" originalName="Ensure proper arguments to Events" section="total">
    <english>Number of methods</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="description">
    <english>This rule will check the use of Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName methods</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="name">
    <english>Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="rationale">
    <english>The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the Load(Byte[], Byte[], SecurityContextSource) method.</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="reference">
    <english>https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.loadfrom?view=netcore-3.1
https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.loadfile?view=netcore-3.1
https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.loadwithpartialname?view=netcore-3.1</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="remediation">
    <english>Always use Assembly.Load as main method to load DLL.</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="remediationSample">
    <english>static void Main(string[] args)
{
    Assembly.Load(...); // NO VIOLATION
}</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="sample">
    <english>static void Main(string[] args)
{
    Assembly.LoadFrom(...); // VIOLATION
    Assembly.LoadFile(...); // VIOLATION
    Assembly.LoadWithPartialName(...); // VIOLATION
}</english>
  </metric>
  <metric id="2200018" type="quality-rule" originalName="Avoid using Assembly.LoadFrom, Assembly.LoadFile and Assembly.LoadWithPartialName" section="total">
    <english>Number of methods and fields and properties initialized using a lambda function</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="description">
    <english>This rule will check if synchronous task could be distinguished as Async or Sync based on name i.e. if async/sync suffixes are used in such methods as expected.</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="name">
    <english>Avoid methods named without following synchronous/asynchronous convention</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="rationale">
    <english>According to the Task-based Asynchronous Pattern (TAP), methods returning either a System.Threading.Tasks.Task or a System.Threading.Tasks.Task&lt;TResult&gt; are considered asynchronous. Such methods should use the Async suffix. Conversely methods which do not return such Tasks should not have an "Async" suffix.</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="reference">
    <english>https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="remediation">
    <english>Ensure your methods name are following synchronous/asynchronous convention.</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="remediationSample">
    <english>using System.Threading;
using System.Threading.Tasks;

namespace theLibrary
{

  public class theClass
  {
    public Task ReadAsync(byte [] buffer, int offset, int count, CancellationToken cancellationToken) // fixed violation
    {
       // source code
    }

    public int Read() { // fixed violation
       return 0;
    }

  }
}</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="sample">
    <english>using System.Threading;
using System.Threading.Tasks;

namespace theLibrary
{

  public class theClass
  {
    public Task Read(byte [] buffer, int offset, int count, CancellationToken cancellationToken)  // violation
    {
       // source code
    }

    public int ReadAsync() { // violation
       return 0;
    }
  }
}</english>
  </metric>
  <metric id="2200020" type="quality-rule" originalName="Avoid methods named without following synchronous/asynchronous convention" section="total">
    <english>Number of methods</english>
  </metric>
  <metric id="2200022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="description">
    <english>This rule will raise violations if string.ToLower(), ToUpper, IndexOf, LastIndexOf, and Compare do not specify culture argument or CompareTo is called.</english>
  </metric>
  <metric id="2200022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="name">
    <english>Culture Dependent String operations should specify culture</english>
  </metric>
  <metric id="2200022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="rationale">
    <english>Calls without a culture may work fine in the system's "home" environment, but break in ways that are extremely difficult to diagnose for customers who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them.</english>
  </metric>
  <metric id="2200022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="reference">
    <english>https://wiki.sei.cmu.edu/confluence/display/java/STR02-J.+Specify+an+appropriate+locale+when+comparing+locale-dependent+data</english>
  </metric>
  <metric id="2200022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="remediation">
    <english>Use Culture argument or use culture invariant version. In case of CompareTo, CompareOrdinal, or Compare with culture.</english>
  </metric>
  <metric id="2200022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="remediationSample">
    <english>var lowered = someString.ToLower(CultureInfo.InvariantCulture);

-or-

var lowered = someString.ToLowerInvariant();</english>
  </metric>
  <metric id="2200022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="sample">
    <english>var lowered = someString.ToLower(); //Noncompliant</english>
  </metric>
  <metric id="2200022" type="quality-rule" originalName="Culture Dependent String operations should specify culture" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="description">
    <english>This rule checks for fields that are public static of type System.Array or System.Collections.Generic.ICollection&lt;T&gt; and are not read-only.</english>
  </metric>
  <metric id="2200024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="name">
    <english>Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static</english>
  </metric>
  <metric id="2200024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="rationale">
    <english>If field is static and public and not read-only, it can affect every class that uses them. This can lead to unexpected behavior.</english>
  </metric>
  <metric id="2200024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="remediation">
    <english>Make visibility of fields protected\private or make them of type Immutable\read-only. This can done through:
- is of type 
      System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;
      System.Collections.ObjectModel.ReadOnlyDictionary&lt;TKey, TValue&gt;
      System.Collections.Immutable.IImmutableArray&lt;T&gt;
      System.Collections.Immutable.IImmutableDictionary&lt;TKey, TValue&gt;
      System.Collections.Immutable.IImmutableList&lt;T&gt;
      System.Collections.Immutable.IImmutableSet&lt;T&gt;
      System.Collections.Immutable.IImmutableStack&lt;T&gt;
      System.Collections.Immutable.IImmutableQueue&lt;T&gt;
- make fields read-only (with inline initialization with an immutable type )</english>
  </metric>
  <metric id="2200024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="remediationSample">
    <english>public class A
{
  protected static string[] strings1 = {"first","second"};
  protected static List&lt;String&gt; strings3 = new List&lt;String&gt;();
  // ...
}</english>
  </metric>
  <metric id="2200024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="sample">
    <english>public class A
{
  public static string[] strings1 = {"first","second"};  // Noncompliant
  public static List&lt;String&gt; strings3 = new List&lt;String&gt;();  // Noncompliant
  // ...
}</english>
  </metric>
  <metric id="2200024" type="quality-rule" originalName="Mutable static fields of type System.Collections.Generic.ICollection&lt;T&gt; or System.Array should not be public static" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="description">
    <english>This rule will check whether an exception type object is created but not thrown.</english>
  </metric>
  <metric id="2200026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="name">
    <english>Avoid creating exception without throwing them</english>
  </metric>
  <metric id="2200026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="rationale">
    <english>Only creating exception and throwing it would mean that either it is a mistake or it is used for side effect of object creation.</english>
  </metric>
  <metric id="2200026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="remediation">
    <english>Throw the exception or remove the statement</english>
  </metric>
  <metric id="2200026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="remediationSample">
    <english>var o = new Exception();

throw o;

throw new Exception();</english>
  </metric>
  <metric id="2200026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="sample">
    <english>var e = new Exception();

new Exception();</english>
  </metric>
  <metric id="2200026" type="quality-rule" originalName="Avoid creating exception without throwing them" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200028" type="quality-rule" originalName="Use Logical OR and AND instead of Bitwise OR and AND in boolean context" section="description">
    <english>This rule will check whether bitwise OR (|) is used instead of Logical OR (||) in boolean context.
This rule will check whether bitwise AND (&amp;) is used instead of Logical AND (&amp;&amp;) in boolean context.</english>
  </metric>
  <metric id="2200028" type="quality-rule" originalName="Use Logical OR and AND instead of Bitwise OR and AND in boolean context" section="name">
    <english>Use Logical OR and AND instead of Bitwise OR and AND in boolean context</english>
  </metric>
  <metric id="2200028" type="quality-rule" originalName="Use Logical OR and AND instead of Bitwise OR and AND in boolean context" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200028" type="quality-rule" originalName="Use Logical OR and AND instead of Bitwise OR and AND in boolean context" section="rationale">
    <english>When Bitwise OR or AND is used instead of Logical OR or AND in boolean context, it is most probably a mistake or it is intended for side effect which is incorrect programming practice.</english>
  </metric>
  <metric id="2200028" type="quality-rule" originalName="Use Logical OR and AND instead of Bitwise OR and AND in boolean context" section="remediation">
    <english>Use Logical OR or AND</english>
  </metric>
  <metric id="2200028" type="quality-rule" originalName="Use Logical OR and AND instead of Bitwise OR and AND in boolean context" section="remediationSample">
    <english>Class AClass {
      private int Return1() {
         return 1;
      }

      private int Return0() {
         return 0;
      }

      public void Test() {
         bool b1 = false;
         bool b2 = true;
         var x = b1 || b2;
         x = ReturnFalse() || ReturnTrue();
     }
}</english>
  </metric>
  <metric id="2200028" type="quality-rule" originalName="Use Logical OR and AND instead of Bitwise OR and AND in boolean context" section="sample">
    <english>Class AClass {
      private int Return1() {
         return 1;
      }

      private int Return0() {
         return 0;
      }

      public void Test() {
         bool b1 = false;
         bool b2 = true;
         var x = b1 | b2;
         x = ReturnFalse() | ReturnTrue();
     }
}</english>
  </metric>
  <metric id="2200028" type="quality-rule" originalName="Use Logical OR and AND instead of Bitwise OR and AND in boolean context" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200030" type="quality-rule" originalName="Avoid empty finalizers" section="description">
    <english>The rule will raise a violation when a type implements a finalizer that is empty. Even finalizer with only statement with calls to Debug.Fail and it is not in #if DEBUG part, it will be considered as violation since Debug.Fail is omitted for non-DEBUG configuration.</english>
  </metric>
  <metric id="2200030" type="quality-rule" originalName="Avoid empty finalizers" section="name">
    <english>Avoid empty finalizers</english>
  </metric>
  <metric id="2200030" type="quality-rule" originalName="Avoid empty finalizers" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200030" type="quality-rule" originalName="Avoid empty finalizers" section="rationale">
    <english>Whenever you can, avoid finalizers because of the additional performance overhead that's involved in tracking object lifetime. The garbage collector runs the finalizer before it collects the object. This means that at least two collections are required to collect the object. An empty finalizer incurs this added overhead without any benefit.</english>
  </metric>
  <metric id="2200030" type="quality-rule" originalName="Avoid empty finalizers" section="reference">
    <english>https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1821

https://cwe.mitre.org/data/definitions/1069.html</english>
  </metric>
  <metric id="2200030" type="quality-rule" originalName="Avoid empty finalizers" section="remediation">
    <english>Avoid using empty finalizers</english>
  </metric>
  <metric id="2200030" type="quality-rule" originalName="Avoid empty finalizers" section="sample">
    <english>public class Class1
    {
        // Violation occurs because the finalizer is empty.
        ~Class1()
        {
        }
    }

    public class Class2
    {
        // Violation occurs because Debug.Fail is a conditional method.
        // The finalizer will contain code only if the DEBUG directive
        // symbol is present at compile time. When the DEBUG
        // directive is not present, the finalizer will still exist, but
        // it will be empty.
        ~Class2()
        {
            Debug.Fail("Finalizer called!");
        }
    }</english>
  </metric>
  <metric id="2200030" type="quality-rule" originalName="Avoid empty finalizers" section="total">
    <english>Number of finalizers</english>
  </metric>
  <metric id="2200032" type="quality-rule" originalName="Avoid recursive type inheritance" section="description">
    <english>This rule will raise violation if Recursion is used in type inheritance.</english>
  </metric>
  <metric id="2200032" type="quality-rule" originalName="Avoid recursive type inheritance" section="name">
    <english>Avoid recursive type inheritance</english>
  </metric>
  <metric id="2200032" type="quality-rule" originalName="Avoid recursive type inheritance" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200032" type="quality-rule" originalName="Avoid recursive type inheritance" section="rationale">
    <english>Unlike methods, it is not possible to break out of recursion. If used, it will fail at runtime.</english>
  </metric>
  <metric id="2200032" type="quality-rule" originalName="Avoid recursive type inheritance" section="remediation">
    <english>Do not use recursive type inheritance.</english>
  </metric>
  <metric id="2200032" type="quality-rule" originalName="Avoid recursive type inheritance" section="sample">
    <english>class C1&lt;T&gt; {
      }

      class C2KO&lt;S&gt; : C1&lt;C2KO&lt;C1&lt;S&gt;&gt;&gt; // Noncompliant
      {
         public int x = 101;
      }

      class C3KO&lt;S&gt; : C1&lt;C3KO&lt;C3KO&lt;S&gt;&gt;&gt; // Noncompliant
      {
         public int x = 101;
      }</english>
  </metric>
  <metric id="2200032" type="quality-rule" originalName="Avoid recursive type inheritance" section="total">
    <english>Number pf classes</english>
  </metric>
  <metric id="2200034" type="quality-rule" originalName="For loop stop condition should be invariant" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200034" type="quality-rule" originalName="For loop stop condition should be invariant" section="description">
    <english>This rule will give violation if condition in for loop is not invariant or if the counter is modified inside the loop.</english>
  </metric>
  <metric id="2200034" type="quality-rule" originalName="For loop stop condition should be invariant" section="name">
    <english>For loop stop condition should be invariant</english>
  </metric>
  <metric id="2200034" type="quality-rule" originalName="For loop stop condition should be invariant" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200034" type="quality-rule" originalName="For loop stop condition should be invariant" section="rationale">
    <english>A for loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.

Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the introduction of errors in the future.

This gives violation:
   - when the loop counters are updated in the body of the for loop.
   - When the stop condition depend upon a method call
   - When the stop condition depends on an object property, since such properties could change during the execution of the loop.</english>
  </metric>
  <metric id="2200034" type="quality-rule" originalName="For loop stop condition should be invariant" section="remediation">
    <english>Make for loop condition invariant.</english>
  </metric>
  <metric id="2200034" type="quality-rule" originalName="For loop stop condition should be invariant" section="remediationSample">
    <english>class Foo
{
    static void Main()
    {
        for (int i = 1; i &lt;= 5; i++)
        {
            Console.WriteLine(i);
        }
    }
}</english>
  </metric>
  <metric id="2200034" type="quality-rule" originalName="For loop stop condition should be invariant" section="sample">
    <english>class Foo
{
    static void Main()
    {
        for (int i = 1; i &lt;= 5; i++)
        {
            Console.WriteLine(i);
            if (condition)
            {
               i = 20;
           }
        }
    }
}</english>
  </metric>
  <metric id="2200034" type="quality-rule" originalName="For loop stop condition should be invariant" section="total">
    <english>Number of methods</english>
  </metric>
  <metric id="2200036" type="quality-rule" originalName="Ensure constructors of serializable classes are secure" section="description">
    <english>This rule raises an issue when a type implements the System.Runtime.Serialization.ISerializable interface, is not a delegate or interface, is declared in an assembly that allows partially trusted callers and has a constructor that takes a System.Runtime.Serialization.SerializationInfo object and a System.Runtime.Serialization.StreamingContext object which is not secured by a security check, but one or more of the regular constructors in the type is secured.</english>
  </metric>
  <metric id="2200036" type="quality-rule" originalName="Ensure constructors of serializable classes are secure" section="name">
    <english>Ensure constructors of serializable classes are secure</english>
  </metric>
  <metric id="2200036" type="quality-rule" originalName="Ensure constructors of serializable classes are secure" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200036" type="quality-rule" originalName="Ensure constructors of serializable classes are secure" section="rationale">
    <english>Because serialization constructors allocate and initialize objects, security checks that are present on regular constructors must also be present on a serialization constructor. Failure to do so would allow callers that could not otherwise create an instance to use the serialization constructor to do this.</english>
  </metric>
  <metric id="2200036" type="quality-rule" originalName="Ensure constructors of serializable classes are secure" section="reference">
    <english>https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization.html</english>
  </metric>
  <metric id="2200036" type="quality-rule" originalName="Ensure constructors of serializable classes are secure" section="remediation">
    <english>Make constructors of serializable classes secure.</english>
  </metric>
  <metric id="2200036" type="quality-rule" originalName="Ensure constructors of serializable classes are secure" section="remediationSample">
    <english>using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security;
using System.Security.Permissions;

[assembly: AllowPartiallyTrustedCallersAttribute()]
namespace MyLibrary
{
    [Serializable]
    public class Foo : ISerializable
    {
        private int n;

        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted = true)]
        public Foo()
        {
           n = -1;
        }

        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted = true)]
        protected Foo(SerializationInfo info, StreamingContext context)
        {
           n = (int)info.GetValue("n", typeof(int));
        }

        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
        {
           info.AddValue("n", n);
        }
    }
}</english>
  </metric>
  <metric id="2200036" type="quality-rule" originalName="Ensure constructors of serializable classes are secure" section="sample">
    <english>using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security;
using System.Security.Permissions;

[assembly: AllowPartiallyTrustedCallersAttribute()]
namespace MyLibrary
{
    [Serializable]
    public class Foo : ISerializable
    {
        private int n;

        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted = true)]
        public Foo()
        {
           n = -1;
        }

        protected Foo(SerializationInfo info, StreamingContext context) // Noncompliant
        {
           n = (int)info.GetValue("n", typeof(int));
        }

        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
        {
           info.AddValue("n", n);
        }
    }
}</english>
  </metric>
  <metric id="2200036" type="quality-rule" originalName="Ensure constructors of serializable classes are secure" section="total">
    <english>Number of constructors</english>
  </metric>
  <metric id="2200038" type="quality-rule" originalName="Merge adjacent try blocks with identical catch/finally statements" section="description">
    <english>This rule will raise a violation when adjacent try-catch blocks have identical catch blocks.</english>
  </metric>
  <metric id="2200038" type="quality-rule" originalName="Merge adjacent try blocks with identical catch/finally statements" section="name">
    <english>Merge adjacent try blocks with identical catch/finally statements</english>
  </metric>
  <metric id="2200038" type="quality-rule" originalName="Merge adjacent try blocks with identical catch/finally statements" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200038" type="quality-rule" originalName="Merge adjacent try blocks with identical catch/finally statements" section="rationale">
    <english>Adjacent try-catch blocks having identical catch blocks must be merged to improve readability of code.</english>
  </metric>
  <metric id="2200038" type="quality-rule" originalName="Merge adjacent try blocks with identical catch/finally statements" section="remediation">
    <english>Merge the try-catch blocks.</english>
  </metric>
  <metric id="2200038" type="quality-rule" originalName="Merge adjacent try blocks with identical catch/finally statements" section="remediationSample">
    <english>try
{
  DoTheFirstThing(a, b);
  DoSomeOtherStuff();
  DoTheSecondThing();
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

try  // Compliant; catch handles exception differently
{
  DoTheThirdThing(a);
}
catch (InvalidOperationException ex)
{
  LogAndDie(ex);
}</english>
  </metric>
  <metric id="2200038" type="quality-rule" originalName="Merge adjacent try blocks with identical catch/finally statements" section="sample">
    <english>try
{
  DoTheFirstThing(a, b);
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

DoSomeOtherStuff();

try  // Noncompliant; catch is identical to previous
{
  DoTheSecondThing();
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

try  // Compliant; catch handles exception differently
{
  DoTheThirdThing(a);
}
catch (InvalidOperationException ex)
{
  LogAndDie(ex);
}</english>
  </metric>
  <metric id="2200038" type="quality-rule" originalName="Merge adjacent try blocks with identical catch/finally statements" section="total">
    <english>Number of methods</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="description">
    <english>This rule will check if assignments are done in if\switch\method\constructor calls.</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="name">
    <english>Avoid assignments in sub-expressions</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="rationale">
    <english>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have side-effects.</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="reference">
    <english>MITRE, CWE-481 - Assigning instead of Comparing
CERT, EXP45-C. - Do not perform assignments in selection statements
CERT, EXP51-J. - Do not perform assignments in conditional expressions</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="remediation">
    <english>Remove assignments from if\switch\method calls\constructor calls sub-expressions.</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="remediationSample">
    <english>var result = str.Substring(index, length);
if (string.IsNullOrEmpty(result))
{
  //...
}</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="sample">
    <english>if (string.IsNullOrEmpty(result = str.Substring(index, length))) // Noncompliant
{
  //...
}</english>
  </metric>
  <metric id="2200040" type="quality-rule" originalName="Avoid assignments in sub-expressions" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200042" type="quality-rule" originalName="Avoid creating new instance of shared instance (.NET)" section="description">
    <english>This rule will raise a violation upon invocation of a constructor of a class considered as shared with [PartCreationPolicyAttribute]</english>
  </metric>
  <metric id="2200042" type="quality-rule" originalName="Avoid creating new instance of shared instance (.NET)" section="name">
    <english>Avoid creating new instance of shared instance (.NET)</english>
  </metric>
  <metric id="2200042" type="quality-rule" originalName="Avoid creating new instance of shared instance (.NET)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200042" type="quality-rule" originalName="Avoid creating new instance of shared instance (.NET)" section="rationale">
    <english>If a class is marked such that only a single object of the class will be exported as a shared object [PartCreationPolicy(CreationPolicy.Shared)], then invoking the constructor and creating new instances with it will result in unexpected behavior.</english>
  </metric>
  <metric id="2200042" type="quality-rule" originalName="Avoid creating new instance of shared instance (.NET)" section="remediation">
    <english>Prefer using the created instance and its resources.</english>
  </metric>
  <metric id="2200042" type="quality-rule" originalName="Avoid creating new instance of shared instance (.NET)" section="remediationSample">
    <english>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel.Composition;
using System.ComponentModel.Design;
using Microsoft.Extensions.DependencyInjection;

namespace GenericObject {

   interface IInterface {

   }

   [PartCreationPolicy(CreationPolicy.Shared)]
   class AService : IInterface {
      public AService() {
         System.Console.WriteLine(System.Reflection.MethodBase.GetCurrentMethod().Name);
      }
   }

   class AServiceUser {
      private ServiceContainer _serviceContainer;
      public AServiceUser() {
         _serviceContainer = new ServiceContainer();
         _serviceContainer.AddService(typeof(IInterface), new AService());
         UseAService();
      }

      public void UseAService() {
         var aservice = _serviceContainer.GetService(typeof(IInterface)); //VIOLATION FIXED
      }
   }
}</english>
  </metric>
  <metric id="2200042" type="quality-rule" originalName="Avoid creating new instance of shared instance (.NET)" section="sample">
    <english>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel.Composition;
using System.ComponentModel.Design;
using Microsoft.Extensions.DependencyInjection;

namespace GenericObject {

   interface IInterface {

   }

   [PartCreationPolicy(CreationPolicy.Shared)]
   class AService : IInterface {
      public AService() {
         System.Console.WriteLine(System.Reflection.MethodBase.GetCurrentMethod().Name);
      }
   }

   class AServiceUser {
      private ServiceContainer _serviceContainer;
      public AServiceUser() {
         _serviceContainer = new ServiceContainer();
         _serviceContainer.AddService(typeof(IInterface), new AService());
         UseAService();
      }

      public void UseAService() {
         var aservice = new AService(); //VIOLATION
      }
   }
}</english>
  </metric>
  <metric id="2200042" type="quality-rule" originalName="Avoid creating new instance of shared instance (.NET)" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200044" type="quality-rule" originalName="Recursion should not be infinite" section="description">
    <english>If recursive methods have a call that results in them being recursive from every control path, recursion becomes infinite. This QR checks for such methods.</english>
  </metric>
  <metric id="2200044" type="quality-rule" originalName="Recursion should not be infinite" section="name">
    <english>Recursion should not be infinite</english>
  </metric>
  <metric id="2200044" type="quality-rule" originalName="Recursion should not be infinite" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for infinite recursive method</english>
  </metric>
  <metric id="2200044" type="quality-rule" originalName="Recursion should not be infinite" section="rationale">
    <english>Recursion if become infinite, would crash the program.</english>
  </metric>
  <metric id="2200044" type="quality-rule" originalName="Recursion should not be infinite" section="remediation">
    <english>Change code to make sure control is returned to caller.</english>
  </metric>
  <metric id="2200044" type="quality-rule" originalName="Recursion should not be infinite" section="remediationSample">
    <english>void RecursiveMethod(int i) {
   if (100 &lt; i) {
      RecursiveMethod(++i);
   }
}</english>
  </metric>
  <metric id="2200044" type="quality-rule" originalName="Recursion should not be infinite" section="sample">
    <english>void RecursiveMethod(int i) {
   RecursiveMethod(++i);
}</english>
  </metric>
  <metric id="2200044" type="quality-rule" originalName="Recursion should not be infinite" section="total">
    <english>Number of methods</english>
  </metric>
  <metric id="2200046" type="quality-rule" originalName="Ensure Serializable Types Follow Best Practices" section="description">
    <english>This rule will raise a violation when an externally visible type is assignable to the System.Runtime.Serialization.ISerializable interface and one of the following conditions is true:

- The System.SerializableAttribute attribute is missing.
- Non-serializable fields are not marked with the System.NonSerializedAttribute attribute.
- There is no serialization constructor.
- An unsealed type has a serialization constructor that is not protected.
- A sealed type has a serialization constructor that is not private.
- An unsealed type has a ISerializable.GetObjectData that is not both public and virtual.
- A derived type has a serialization constructor that does not call the base constructor.
- A derived type has a ISerializable.GetObjectData method that does not call the base method.
- A derived type has serializable fields but the ISerializable.GetObjectData method is not overridden.</english>
  </metric>
  <metric id="2200046" type="quality-rule" originalName="Ensure Serializable Types Follow Best Practices" section="name">
    <english>Ensure Serializable Types Follow Best Practices</english>
  </metric>
  <metric id="2200046" type="quality-rule" originalName="Ensure Serializable Types Follow Best Practices" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200046" type="quality-rule" originalName="Ensure Serializable Types Follow Best Practices" section="rationale">
    <english>Instance fields that are declared in a type that inherits the System.Runtime.Serialization.ISerializable interface are not automatically included in the serialization process. To include the fields, the type must implement the GetObjectData method and the serialization constructor. If the fields should not be serialized, apply the NonSerializedAttribute attribute to the fields to explicitly indicate the decision.

In types that are not sealed, implementations of the GetObjectData method should be externally visible. Therefore, the method can be called by derived types, and is overridable.</english>
  </metric>
  <metric id="2200046" type="quality-rule" originalName="Ensure Serializable Types Follow Best Practices" section="reference">
    <english>https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable?view=net-5.0
https://docs.microsoft.com/en-us/dotnet/api/system.nonserializedattribute?view=net-5.0
https://medium.com/@CPP_Coder/how-to-not-shoot-yourself-in-the-foot-when-working-with-serialization-20a9a13b69b5</english>
  </metric>
  <metric id="2200046" type="quality-rule" originalName="Ensure Serializable Types Follow Best Practices" section="remediation">
    <english>Follow best practices for serializable type.</english>
  </metric>
  <metric id="2200046" type="quality-rule" originalName="Ensure Serializable Types Follow Best Practices" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="description">
    <english>This rule will raise a violation when a type member is marked with a System.Security security attribute that has a different transparency than the security attribute of a container of the member.

Following Security Attributes are considered for comparison:

System.Security.SecurityCriticalAttribute
System.Security.SecurityRulesAttribute
System.Security.SecuritySafeCriticalAttribute
System.Security.SecurityTransparentAttribute
System.Security.SecurityTreatAsSafeAttribute
System.Security.SuppressUnmanagedCodeSecurityAttribute
System.Security.UnverifiableCodeAttribute</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="name">
    <english>Members of larger scope element should not have conflicting transparency annotations</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="rationale">
    <english>Transparency attributes are applied from code elements of larger scope to elements of smaller scope. The transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained in the first element. For example, a class that is marked with the SecurityCriticalAttribute attribute cannot contain a method that is marked with the SecuritySafeCriticalAttribute attribute.</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="reference">
    <english>https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2136?view=vs-2019

OWASP Top 10 2017 Category A6 - Security Misconfiguration</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="remediation">
    <english>To fix this violation, remove the security attribute from the code element that has lower scope, or change its attribute to be the same as the containing code element.</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="remediationSample">
    <english>using System;
using System.Security;

namespace TransparencyWarningsDemo
{

    [SecurityCritical]
    public class CriticalClass
    {
       //Violation Fixed
        public void SafeCriticalMethod()
        {
        }
    }
}</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="sample">
    <english>using System;
using System.Security;

namespace TransparencyWarningsDemo
{

    [SecurityCritical]
    public class CriticalClass
    {
        // CA2136 violation - this method is not really safe critical, since the larger scoped type annotation
        // has precidence over the smaller scoped method annotation.  This can be fixed by removing the
        // SecuritySafeCritical attribute on this method
        [SecuritySafeCritical] //Violation
        public void SafeCriticalMethod()
        {
        }
    }
}</english>
  </metric>
  <metric id="2200048" type="quality-rule" originalName="Members of larger scope element should not have conflicting transparency annotations" section="total">
    <english>Number of Artifacts</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="description">
    <english>This rule will check if any object set as NULL is used inside a method/function.
Limitation to object set as NULL inside the method/function.</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="name">
    <english>Avoid NULL Pointer Dereference</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="rationale">
    <english>A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="reference">
    <english>https://cwe.mitre.org/data/definitions/476.html</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="remediation">
    <english>Always check the object is not null before using it or it is not used in a try block.</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="remediationSample">
    <english>object foo = null;

if ( i &gt; 0)
{
   if(foo != null)
   {
     M1(foo.ToString()); // NO VIOLATION
   }
}
else
{
  foo = new object();
}

M2(foo.ToString());</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="sample">
    <english>object foo = null;

if ( i &gt; 0)
{
  M1(foo.ToString()); // VIOLATION IT IS NULL
}
else
{
  foo = new object();
}

M2(foo.ToString());</english>
  </metric>
  <metric id="2200050" type="quality-rule" originalName="Avoid NULL Pointer Dereference" section="total">
    <english>Number of methods</english>
  </metric>
  <metric id="2200052" type="quality-rule" originalName="Avoid having the same implementation in ALL BRANCHES of a conditional structure" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200052" type="quality-rule" originalName="Avoid having the same implementation in ALL BRANCHES of a conditional structure" section="description">
    <english>This rule will check the if/switch structural blocks to detect if ALL the implementation are similars.</english>
  </metric>
  <metric id="2200052" type="quality-rule" originalName="Avoid having the same implementation in ALL BRANCHES of a conditional structure" section="name">
    <english>Avoid having the same implementation in ALL BRANCHES of a conditional structure</english>
  </metric>
  <metric id="2200052" type="quality-rule" originalName="Avoid having the same implementation in ALL BRANCHES of a conditional structure" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200052" type="quality-rule" originalName="Avoid having the same implementation in ALL BRANCHES of a conditional structure" section="rationale">
    <english>Having the same implementation in ALL BRANCHES of a conditional structure should not happened. It probably denotes a copy/paste error or there shouldn't have a conditional structure here.

Limitations: no violation on "if" chain without "else" clause and "switch" without "default" clause.</english>
  </metric>
  <metric id="2200052" type="quality-rule" originalName="Avoid having the same implementation in ALL BRANCHES of a conditional structure" section="reference">
    <english>Object Management Group (OMG). "Automated Source Code Maintainability Measure (ASCMM)". ASCMM-MNT-19. 2016-01. &lt;http://www.omg.org/spec/ASCMM/1.0&gt;.</english>
  </metric>
  <metric id="2200052" type="quality-rule" originalName="Avoid having the same implementation in ALL BRANCHES of a conditional structure" section="remediation">
    <english>Ensure you copy/paste does not exist in your conditional structure.</english>
  </metric>
  <metric id="2200052" type="quality-rule" originalName="Avoid having the same implementation in ALL BRANCHES of a conditional structure" section="sample">
    <english>if (b == 0)  // VIOLATION
{
    foo();
}
else
{
    foo();
}

int b = a &gt; 12 ? 3 : 3;  // VIOLATION

switch (i) // VIOLATION BECAUSE THERE IS A DEFAULT BLOCK
{
    case 1:
        bar();
        break;
    case 2:
        bar();
        break;
    case 3:
        bar();
        break;
    default:
        bar();
        break;
}</english>
  </metric>
  <metric id="2200052" type="quality-rule" originalName="Avoid having the same implementation in ALL BRANCHES of a conditional structure" section="total">
    <english>Number of methods</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="description">
    <english>Reports all .Net methods calling ConnectionStringBuilder.PersistSecurityInfo with True as parameter value.
The following ConnectionStringBuilder are considered:
   
System.Data.SqlClient.SqlConnectionStringBuilder    
System.Data.OleDb.OleDbConnectionStringBuilder    
System.Data.Odbc.OdbcConnectionStringBuilder    
System.Data.OracleClient.OracleConnectionStringBuilder    
System.Data.EntityClient.EntityConnectionStringBuilder    
Microsoft.Data.SqlClient.SqlConnectionStringBuilder    
Microsoft.Data.OleDb.OleDbConnectionStringBuilder    
Microsoft.Data.Odbc.OdbcConnectionStringBuilder    
Microsoft.Data.OracleClient.OracleConnectionStringBuilder    
Microsoft.Data.EntityClient.EntityConnectionStringBuilder
IBM.Data.DB2.DB2ConnectionStringBuilder
IBM.Data.DB2.iSeries.iDB2ConnectionStringBuilder
MySql.Data.MySqlClient.MySqlConnectionStringBuilder
MySql.Data.MySqlClient.MySqlBaseConnectionStringBuilder
MySqlConnector.MySqlConnectionStringBuilder
Devart.Data.MySql.MySqlConnectionStringBuilder
Oracle.DataAccess.Client.OracleConnectionStringBuilder
Oracle.ManagedDataAccess.Client.OracleConnectionStringBuilder
Devart.Data.Oracle.OracleConnectionStringBuilder
OracleSqlBuilder.OracleSqlConnectionString
Npgsql.NpgsqlConnectionStringBuilder
Microsoft.Data.Sqlite.SqliteConnectionStringBuilder
Teradata.Client.Provider.TdConnectionStringBuilder
Sap.Data.SQLAnywhere.SAConnectionStringBuilder</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="name">
    <english>Avoid Persist Security Info in connection string</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="rationale">
    <english>Allowing the server to retain credentials may allow an attacker to retrieve them, and connect to the back-end using permissions associated to these credentials.</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="reference">
    <english>Microsoft guide for ADO.NET: Protecting Connection Information - Use Persist Security Info=False
https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/protecting-connection-information#use-persist-security-infofalse

MS SQL Server ADO.NET provider PersistSecurityInfo property
https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnectionstringbuilder.persistsecurityinfo?view=dotnet-plat-ext-6.0

CWE-257: Storing Passwords in a Recoverable Format
http://cwe.mitre.org/data/definitions/257.html</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="remediation">
    <english>Either explicitly set Persist Security Info to False or No, or leave it on its default value.</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="remediationSample">
    <english>SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();  
builder["Data Source"] = "(local)";  
builder["Persist Security Info"] = false;     // FIXED
builder["Initial Catalog"] = "AdventureWorks;NewValue=Bad";  

or , by default:
SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();  
builder["Data Source"] = "(local)";
builder["Initial Catalog"] = "AdventureWorks;NewValue=Bad";</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="sample">
    <english>SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();  
builder["Data Source"] = "(local)";  
builder["Persist Security Info"] = true;     // VIOLATION
builder["Initial Catalog"] = "AdventureWorks;NewValue=Bad";</english>
  </metric>
  <metric id="2200054" type="quality-rule" originalName="Avoid Persist Security Info in connection string" section="total">
    <english>Number of .Net methods</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="description">
    <english>This rule raise a violation for the usage of System.Web.UI.HtmlControls.HtmlInputHidden constructor.</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="name">
    <english>Avoid hidden form field</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="rationale">
    <english>Since they are not rendered visible, hidden inputs are sometimes erroneously perceived as safe. But similar to session cookies, hidden form inputs store the software’s state information client-side, instead of server-side. This makes it vulnerable.

If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="reference">
    <english>CWE-472: External Control of Assumed-Immutable Web Parameter
https://cwe.mitre.org/data/definitions/472.html

CWE-642: External Control of Critical State Data
https://cwe.mitre.org/data/definitions/642.html

OWASP Attacks - Web Parameter Tampering
https://owasp.org/www-community/attacks/Web_Parameter_Tampering

CGISecurity - OWASP - A Guide to Building Secure Web Applications (2002, but still interesting)
https://www.cgisecurity.com/owasp/html/ch11s04.html

HtmlInputHidden Class
https://learn.microsoft.com/en-us/dotnet/api/system.web.ui.htmlcontrols.htmlinputhidden?view=netframework-4.8</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="remediation">
    <english>Instead of using hidden form fields, the application designer can simply use one session token to reference properties stored in a server-side cache. When an application needs to check a user property, it checks the session cookie with its session table and points to the user's data variables in the cache / database. This is by far the correct way to architect this problem.

If the above technique of using a session variable instead of a hidden field cannot be implemented, a second approach is as follows.

The name/value pairs of the hidden fields in a form can be concatenated together into a single string. A secret key that never appears in the form is also appended to the string. This string is called the Outgoing Form Message. An MD5 digest or other one-way hash is generated for the Outgoing Form Message. This is called the Outgoing Form Digest and it is added to the form as an additional hidden field.</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="remediationSample">
    <english>Avoid using HtmlInputHidden constructor.</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="sample">
    <english>HtmlInputHidden hidden = new HtmlInputHidden();</english>
  </metric>
  <metric id="2200056" type="quality-rule" originalName="Avoid hidden form field" section="total">
    <english>Number of .Net artifacts</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="description">
    <english>This rule reports potentially unintended logging or printing to the console of data fields specifically marked with the attribute [SecurityCritical]. This rule will flag all instances of calls to the most widely used logging methods that report messages at error or critical error levels.</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="name">
    <english>Avoid security-critical information exposure</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="rationale">
    <english>The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.
The severity of the vulnerability can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker.
The outcome is Information Disclosure / Information Leak, and these information could used in subsequent attacks.</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="reference">
    <english>CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
https://cwe.mitre.org/data/definitions/200.html

CWE-359: Exposure of Private Personal Information to an Unauthorized Actor
https://cwe.mitre.org/data/definitions/359.html

OWASP Cheat Sheet Series - User Privacy Protection Cheat Sheet
https://cheatsheetseries.owasp.org/cheatsheets/User_Privacy_Protection_Cheat_Sheet.html

OWASP Cheat Sheet Series - Logging Cheat Sheet - Data to exclude
https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html#data-to-exclude</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="remediation">
    <english>Don't disclose data marked as [SecurityCritical], or encrypt them before logging.</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="remediationSample">
    <english>class Program
{
    [SecuritySafeCritical]
    static int y = 10;
    static void Main(string[] args)
    {
        logger.Error($"y = {y}");
    }

    public static log4net.ILog logger; // initialized elsewhere
}</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="sample">
    <english>class Program
{
    [SecurityCritical]
    static int x = 10;
    public string Password
    {
    [SecurityCritical] get { return _password; }
    } 

    static void Main(string[] args)
    {
        Console.WriteLine(" Critical X " + x); // Violation
        Console.WriteLine(" Password " + Password); // Violation
    }

   
}</english>
  </metric>
  <metric id="2200058" type="quality-rule" originalName="Avoid security-critical information exposure" section="total">
    <english>Number of .Net Methods</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="description">
    <english>This rule detects the usage of XmlDocument XML parser calls not preceded in same .Net method by a call to the secure mode of the parser.</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="name">
    <english>Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="rationale">
    <english>External XML entities may allow an attacker to access confidential information as well as perform server-side request forgery (SSRF) attacks. In some cases, XXE may even enable port scanning and lead to remote code execution.

System.Xml.XPath.XPathNavigator is unsafe by default in .NET Framework versions prior to 4.5.2.
This is due to the fact that it implements IXPathNavigable objects like XmlDocument, which are also unsafe by default in versions prior to 4.5.2.</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="reference">
    <english>CWE-611: Improper Restriction of XML External Entity Reference
https://cwe.mitre.org/data/definitions/611.html

OWASP Vulnerabilities- XML External Entity (XXE) Processing
https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing

OWASP Cheat Sheet Series - XML External Entity Prevention Cheat Sheet
https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="remediation">
    <english>The best way to avoid XXE vulnerabilities is to completely disable document type definitions (DTDs) in your XML parser. If this is not possible, you must disable external entities and external document type declarations for your parser.

You can make XPathNavigator safe by giving it a safe parser like XmlReader (which is safe by default) in the XPathDocument's constructor.</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="remediationSample">
    <english>// .NET Framework &lt; 4.5.2
XmlDocument parser = new XmlDocument();
parser.XmlResolver = null; // FIXED: XmlResolver has been set to null
parser.LoadXml("xxe.xml");

or

// .NET Framework 4.5.2+
XmlDocument parser = new XmlDocument(); // FIXED: XmlDocument is safe by default in  .NET Framework 4.5.2+ because XmlResolver is set by default to null
parser.LoadXml("xxe.xml");</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="sample">
    <english>// .NET Framework &lt; 4.5.2
XmlDocument parser = new XmlDocument(); // VIOLATION: XmlDocument is not safe by default
parser.LoadXml("xxe.xml");

or

// .NET Framework 4.5.2+
XmlDocument parser = new XmlDocument();
parser.XmlResolver = new XmlUrlResolver(); // VIOLATION: XmlDocument.XmlResolver configured with XmlUrlResolver that makes it unsafe
parser.LoadXml("xxe.xml");</english>
  </metric>
  <metric id="2200060" type="quality-rule" originalName="Avoid using XmlDocument without restriction of XML External Entity Reference (XXE)" section="total">
    <english>Number of .Net methods</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="description">
    <english>This rule detects the usage of XmlTextReader XML parser calls not preceded in same .Net method by a call to the secure mode of the parser.</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="name">
    <english>Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="rationale">
    <english>External XML entities may allow an attacker to access confidential information as well as perform server-side request forgery (SSRF) attacks. In some cases, XXE may even enable port scanning and lead to remote code execution.</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="reference">
    <english>CWE-611: Improper Restriction of XML External Entity Reference
https://cwe.mitre.org/data/definitions/611.html

OWASP Vulnerabilities- XML External Entity (XXE) Processing
https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing

OWASP Cheat Sheet Series - XML External Entity Prevention Cheat Sheet
https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="remediation">
    <english>The best way to avoid XXE vulnerabilities is to completely disable document type definitions (DTDs) in your XML parser. If this is not possible, you must disable external entities and external document type declarations for your parser.</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="remediationSample">
    <english>// .NET 4.5.2+
XmlTextReader reader = new XmlTextReader("xxe.xml"); // FIXED: XmlTextReader is safe by default in .NET Framework 4.5.2+ because XmlResolver is set by default to null
while (reader.Read())
{ ... }

// .NET 4.0 to .NET 4.5.1
XmlTextReader reader = new XmlTextReader("xxe.xml");
reader.DtdProcessing = DtdProcessing.Prohibit; // FIXED: XmlTextReader is safe by default in .NET Framework 4.5.2+ because XmlResolver is set by default to null

// &lt; .NET 4.0
XmlTextReader reader = new XmlTextReader(stream);
reader.ProhibitDtd = true; // FIXED: default is false</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="sample">
    <english>// .NET Framework &lt; 4.5.2
XmlTextReader reader = new XmlTextReader("xxe.xml"); // VIOLATION: XmlTextReader is not safe by default
while (reader.Read())
{ ... }

or

// .NET Framework 4.5.2+
XmlTextReader reader = new XmlTextReader("xxe.xml");
reader.XmlResolver = new XmlUrlResolver(); // VIOLATION: XmlTextRead.XmlResolver configured with XmlUrlResolver that makes it unsafe
while (reader.Read())
{ ... }</english>
  </metric>
  <metric id="2200062" type="quality-rule" originalName="Avoid using XmlTextReader without restriction of XML External Entity Reference (XXE)" section="total">
    <english>Number of .Net methods</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="description">
    <english>This rule detects the usage of XPathNavigator XML parser calls not preceded in same .Net method by a call to the secure mode of the parser.

Restriction: if the XPathNavigator object is created from an XmlDocument instance we don't raise a violation beacause the rule "Avoid using XmlDocument without restriction of XML External Entity Reference" will  already raise a violation if this instance of XmlDocument is not safe.</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="name">
    <english>Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="rationale">
    <english>External XML entities may allow an attacker to access confidential information as well as perform server-side request forgery (SSRF) attacks. In some cases, XXE may even enable port scanning and lead to remote code execution.

System.Xml.XPath.XPathNavigator is unsafe by default in .NET Framework versions prior to 4.5.2.
This is due to the fact that it implements IXPathNavigable objects like XmlDocument, which are also unsafe by default in versions prior to 4.5.2.</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="reference">
    <english>CWE-611: Improper Restriction of XML External Entity Reference
https://cwe.mitre.org/data/definitions/611.html

OWASP Vulnerabilities- XML External Entity (XXE) Processing
https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing

OWASP Cheat Sheet Series - XML External Entity Prevention Cheat Sheet
https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="remediation">
    <english>The best way to avoid XXE vulnerabilities is to completely disable document type definitions (DTDs) in your XML parser. If this is not possible, you must disable external entities and external document type declarations for your parser.

You can make XPathNavigator safe by giving it a safe parser like XmlReader (which is safe by default) in the XPathDocument's constructor.</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="remediationSample">
    <english>// .NET &lt; 4.5.2
XmlReader reader = XmlReader.Create("example.xml");
XPathDocument doc = new XPathDocument(reader);
XPathNavigator nav = doc.CreateNavigator();   // FIXED, because the XML content has been loaded in the XmlReader object first, then passed into the XPathDocument constructor.
string xml = nav.InnerXml.ToString();</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="sample">
    <english>// .NET &lt; 4.5.2
XPathDocument xmlDoc = new XPathDocument(model.FilePath);
XPathNavigator nav = xmlDoc.CreateNavigator();   // VIOLATION : XPathDocument loading XML content using a file URI stored in the model.FilePath variable.</english>
  </metric>
  <metric id="2200064" type="quality-rule" originalName="Avoid using XPathNavigator without restriction of XML External Entity Reference (XXE)" section="total">
    <english>Number of .Net methods</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="description">
    <english>This rule reports the use of Thread in the .Net code.

Following methods will be reported as a violation:
- System.Threading.Thread.+ctor (constructor)
- System.Threading.ThreadPool.QueueUserWorkItem</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="name">
    <english>Avoid direct use of threads (.Net)</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="rationale">
    <english>Thread management in a web application is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="reference">
    <english>CWE-383: J2EE Bad Practices: Direct Use of Threads    (applicable to .Net too)
https://cwe.mitre.org/data/definitions/383.html

CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')
https://cwe.mitre.org/data/definitions/362.html

CWE-366: Race Condition within a Thread
https://cwe.mitre.org/data/definitions/366.html</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="remediation">
    <english>Avoid using threads.</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="remediationSample">
    <english>Don't use thread API.</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="sample">
    <english>sample 1
Thread x = new Thread(WriteY); // create a new thread: VIOLATION
x.Start(); // execute of the method WriteY()

sample 2
ThreadPool.QueueUserWorkItem(HelloWorld);</english>
  </metric>
  <metric id="2200066" type="quality-rule" originalName="Avoid direct use of threads (.Net)" section="total">
    <english>Number of .Net methods</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="associatedValueName">
    <english>Number of violation occurrences</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="description">
    <english>This rule reports all post action methods having automatic, unrestricted object binding for object automatically save in database using an ORM.

Limitation: Entity Framework is the only ORM considered at the moment.</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="name">
    <english>Avoid unsafe object binding (.NET)</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="output">
    <english>Associated to each violation, the following information is provided:
- The number of violation occurrences
- Bookmarks for violation occurrences found in the source code</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="rationale">
    <english>Controllers and Razor pages work with data that comes from HTTP requests. For example, route data may provide a record key, and posted form fields may provide values for the properties of the model. Writing code to retrieve each of these values and convert them from strings to .NET types would be tedious and error-prone. Model binding automates this process. The model binding system:
    * Retrieves data from various sources such as route data, form fields, and query strings.
    * Provides the data to controllers and Razor pages in method parameters and public properties.
    * Converts string data to .NET types.
    * Updates properties of complex types.
However binding objects also permit a direct access to them that an attacker can use to tamper with them.</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="reference">
    <english>CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes
https://cwe.mitre.org/data/definitions/915.html

OWASP Cheat Sheet Series - Mass Assignment Cheat Sheet
https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="remediation">
    <english>Ensure that access to attributes and objects of model binded objects are restricted by using:
  * White list the bindable, non-sensitive fields
  * Black list the non-bindable, sensitive fields
  * Use Data Transfer Objects (DTOs)
  * Use attributes ReadOnly or BindNever on sensitive of the data model class
  * Use a strongly type approach with TryUpdateModel&lt;Interface&gt; or UpdateModel&lt;Interface&gt; where the interface only has the non-sensitive fields</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="remediationSample">
    <english>White list :  [Bind(Include="UserName,Location")]
or black list: [Bind(Exclude="Password")]
// POST: User/Create
[HttpPost]
public ActionResult Create([Bind(Include="UserName,Location")]User user)
{    
   try{
      _db.Users.Add(user);
      _db.SaveChanges();
      return RedirectToAction("Index");
   }catch{
      return View();
   }
}

// POST: User/Edit
[HttpPost]
public ActionResult Edit([Bind(Exclude="Password,UserId")]User user) 
{     
   try{
      _db.Users.Update(user);
      _db.SaveChanges();
      return RedirectToAction("Index");
   }catch{
      return View();
   }
}</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="sample">
    <english>// POST: User/Create
[HttpPost]
public ActionResult Create(User user) // VIOLATION : binding without retriction
{     
   try{
      _db.Users.Add(user);
      _db.SaveChanges();
      return RedirectToAction("Index");
   }catch{
      return View();
   }
}

// POST: User/Edit
[HttpPost]
public ActionResult Edit(User user) // VIOLATION : binding without retriction
{     
   try{
      _db.Users.Update(user);
      _db.SaveChanges();
      return RedirectToAction("Index");
   }catch{
      return View();
   }
}</english>
  </metric>
  <metric id="2200068" type="quality-rule" originalName="Avoid unsafe object binding (.NET)" section="total">
    <english>Number of .Net methods</english>
  </metric>
</root>