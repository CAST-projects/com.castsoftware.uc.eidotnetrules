//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTests.Properties {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SourcesToTest {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SourcesToTest() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("UnitTests.Properties.SourcesToTest", typeof(SourcesToTest).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///   public class AvoidAssignmentsInSubExpressions_Source
        ///   {
        ///      class Test
        ///      {
        ///         public Test(String str) {
        ///
        ///         }
        ///         public void AMethod(String str) {
        ///
        ///         }
        ///
        ///         public void BMethod(String str1, String str2) {
        ///
        ///         }
        ///      }
        ///
        ///      public void AssignmentsInSubExpressionsKO() {
        ///         Str [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidAssignmentsInSubExpressions_Source {
            get {
                return ResourceManager.GetString("AvoidAssignmentsInSubExpressions_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;   
        ///using System.Threading.Tasks;
        ///
        ///namespace Sonar.Analyzers.CSharp.Common.Tests.UnitTests.Analyzers.AvoidClassesWithTooManyConstructors
        ///{
        ///    class AvoidClassesWithTooManyConstructors_QualUatExample
        ///    {
        ///        public AvoidClassesWithTooManyConstructors_QualUatExample()
        ///        {
        ///            //1er constructeur
        ///        }
        ///
        ///        public AvoidClassesWithTooManyConstructors_QualUatExample(string maChaine)
        ///   [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidClassesWithTooManyConstructors_QualUatExample {
            get {
                return ResourceManager.GetString("AvoidClassesWithTooManyConstructors_QualUatExample", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Dynamic;
        ///
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class AvoidCreatingExceptionWithoutThrowingThem_Source {
        ///
        ///      private NullReferenceException _nullReferenceExceptionNotThrown = new NullReferenceException();
        ///      private NullReferenceException _nullReferenceExceptionThrown = new NullReferenceException();
        ///
        ///      private void ThrowNullReferenceException()  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidCreatingExceptionWithoutThrowingThem_Source {
            get {
                return ResourceManager.GetString("AvoidCreatingExceptionWithoutThrowingThem_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.ComponentModel.Composition;
        ///using System.ComponentModel.Design;
        ///
        ///
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///
        ///   namespace Shared
        ///   {
        ///      interface IInterface1
        ///      {
        ///
        ///      }
        ///
        ///      interface IInterface2
        ///      {
        ///
        ///      }
        ///
        ///      interface IInterface3
        ///      {
        ///
        ///      }
        ///
        ///      interface IInterface4
        ///      {
        ///
        ///      }
        ///
        ///      interface IInterface5
        ///      {
        ///
        ///      }
        ///
        ///      interface IInterface6
        ///      {
        ///
        ///      }
        ///
        ///      interface IInterface7
        ///      {        /// [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidCreatingNewInstanceOfSharedInstance_Source {
            get {
                return ResourceManager.GetString("AvoidCreatingNewInstanceOfSharedInstance_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.TestSources
        ///{
        ///    public class AvoidDirectUseOfThreads_Source
        ///    {
        ///        public static void ThreadProc()
        ///        {
        ///            for (int i = 0; i &lt; 10; i++)
        ///            {
        ///                Console.WriteLine(&quot;ThreadProc: {0}&quot;, i);
        ///                // Yield the rest of the time slice.
        ///                Thread.Sleep(0);
        ///            }
        ///   [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidDirectUseOfThreads_Source {
            get {
                return ResourceManager.GetString("AvoidDirectUseOfThreads_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Diagnostics;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class AvoidEmptyFinalizers_Source {
        ///
        ///      class FinalizerWithDebugFailInIfDebugKO {
        ///         ~FinalizerWithDebugFailInIfDebugKO() {
        ///#if DEBUG
        ///            Debug.Fail(&quot;Failed&quot;);
        ///#endif
        ///         }
        ///      }
        ///
        ///      class FinalizerInIfDebugWithDebugFailOK {
        ///#if DEBUG
        ///         ~FinalizerInIfDebugWithDebugF [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidEmptyFinalizers_Source {
            get {
                return ResourceManager.GetString("AvoidEmptyFinalizers_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.TestSources
        ///{
        ///    public class AvoidHavingSameImplementationInAllBranchesOfConditionalStructure_Source
        ///    {
        ///
        ///        public void func1() {}
        ///        public void func2() {}
        ///        public void Run() 
        ///        {
        ///            int val = -1;
        ///            if (val == 1)
        ///            {
        ///                func1();
        ///            }
        ///             else if (val == 2)
        ///         [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidHavingSameImplementationInAllBranchesOfConditionalStructure_Source {
            get {
                return ResourceManager.GetString("AvoidHavingSameImplementationInAllBranchesOfConditionalStructure_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Web.UI.HtmlControls;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///    class AvoidHiddenFormField_Source
        ///    {
        ///        public void func()
        ///        {
        ///            HtmlInputHidden hidden = new HtmlInputHidden();
        ///        }
        ///    }
        ///}
        ///.
        /// </summary>
        internal static string AvoidHiddenFormField_Source {
            get {
                return ResourceManager.GetString("AvoidHiddenFormField_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   class AvoidLocalVariablesShadowingClassFields_Source {
        ///      class Shadow {
        ///         private int aMember;
        ///
        ///         void Shadow_aMemberKO() {
        ///            int aMember = 0;
        ///         }
        ///
        ///         void Shadow_aMemberInInnerScopeKO() {
        ///            {
        ///               int aMember = 0;
        ///            }
        ///         }
        ///
        ///         void DontShadow_aMemb [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidLocalVariablesShadowingClassFields_Source {
            get {
                return ResourceManager.GetString("AvoidLocalVariablesShadowingClassFields_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   class AvoidLocalVariablesShadowingClassFields_Source {
        ///      class Shadow {
        ///         private int aMember;
        ///
        ///         void Shadow_aMemberKO() {
        ///            int aMember = 0;
        ///         }
        ///
        ///         void Shadow_aMemberInInnerScopeKO() {
        ///            {
        ///               int aMember = 0;
        ///            }
        ///         }
        ///
        ///         void DontShadow_aMemb [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidLocalVariablesShadowingClassFields_Source1 {
            get {
                return ResourceManager.GetString("AvoidLocalVariablesShadowingClassFields_Source1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Threading;
        ///
        ///
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class AvoidMethodsNamedWithoutFollowingSynchronousAsynchronousConvention_Source {
        ///
        ///    public Task Read(byte [] buffer, int offset, int count, CancellationToken cancellationToken) 
        ///    {
        ///        Action&lt;object&gt; action = (object obj) =&gt;
        ///                        {
        ///                           Console.WriteLin [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidMethodsNamedWithoutFollowingSynchronousAsynchronousConvention_Source {
            get {
                return ResourceManager.GetString("AvoidMethodsNamedWithoutFollowingSynchronousAsynchronousConvention_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///    public class AvoidNullPointerDereference_Source
        ///    {
        ///        object foo2 = null;
        ///        object foo3;
        ///        static object foo4 = null;
        ///        void f()
        ///        {
        ///            object foo = null;
        ///            int i = 0;
        ///            if (i &gt; 0)
        ///            {
        ///                foo.ToString(); // VIOLATION IT IS NULL
        ///            }
        ///      [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidNullPointerDereference_Source {
            get {
                return ResourceManager.GetString("AvoidNullPointerDereference_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Data.SqlClient;
        ///using System.Data.Common;
        ///using System.Data;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///    class AvoidPersistSecurityInfoInConnectionString_Source
        ///    {
        ///        public void func()
        ///        {
        ///
        ///            SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();
        ///            builder[&quot;Data Source&quot;] = &quot;(local)&quot;;
        ///            builder[&quot;Persist  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidPersistSecurityInfoInConnectionString_Source {
            get {
                return ResourceManager.GetString("AvoidPersistSecurityInfoInConnectionString_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class AvoidRecursiveTypeInheritance_Source {
        ///
        ///      class C1&lt;T&gt; {
        ///      }
        ///
        ///      class C2KO&lt;S&gt; : C1&lt;C2KO&lt;C1&lt;S&gt;&gt;&gt; // Noncompliant
        ///      {
        ///         public int x = 101;
        ///      }
        ///
        ///      class C3KO&lt;S&gt; : C1&lt;C3KO&lt;C3KO&lt;S&gt;&gt;&gt; // Noncompliant
        ///      {
        ///         public int x = 101;
        ///      }
        ///
        ///      class C4OK&lt;S&gt; : C1&lt;C1&lt;C1&lt;S&gt;&gt;&gt; 
        ///      {
        /// [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidRecursiveTypeInheritance_Source {
            get {
                return ResourceManager.GetString("AvoidRecursiveTypeInheritance_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Security;
        ///using System.Diagnostics;
        ///
        ///namespace UnitTests.TestSources
        ///{
        ///    class AvoidSecurityCriticalInformationExposure_Source
        ///    {
        ///        [SecurityCritical]
        ///        static int x = 10;
        ///        private string _password = &quot;pass&quot;;
        ///        public string Password
        ///        {
        ///            [SecurityCritical]
        ///            get { return _password; }
        ///        }
        ///
        ///        [ [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidSecurityCriticalInformationExposure_Source {
            get {
                return ResourceManager.GetString("AvoidSecurityCriticalInformationExposure_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///    public class AvoidUnsafeObjectBinding_Source
        ///    {
        ///
        ///    }
        ///}
        ///.
        /// </summary>
        internal static string AvoidUnsafeObjectBinding_Source {
            get {
                return ResourceManager.GetString("AvoidUnsafeObjectBinding_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Reflection;
        ///
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class AvoidUsing_Assembly_LoadFrom_Assembly_LoadFileAndAssembly_LoadWithPartialName_Source {
        ///
        ///      public class KlassAssemblyLoadFrom {
        ///         public void foo() {
        ///            Assembly SampleAssembly;
        ///            SampleAssembly = Assembly.LoadFrom(&quot;c:\\Sample.Assembly.dll&quot;);
        ///            // Obtain a refe [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidUsing_Assembly_LoadFrom_Assembly_LoadFileAndAssembly_LoadWithPartialName_Source {
            get {
                return ResourceManager.GetString("AvoidUsing_Assembly_LoadFrom_Assembly_LoadFileAndAssembly_LoadWithPartialName_Sou" +
                        "rce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml;
        ///
        ///namespace UnitTests.TestSources
        ///{
        ///    public class AvoidUsingXmlDocumentWithoutRestrictionOfXMLExternalEntityReference_Source
        ///    {
        ///        public void func()
        ///        {
        ///            // .NET Framework &lt; 4.5.2
        ///            XmlDocument parser = new XmlDocument(); // VIOLATION: XmlDocument is not safe by default
        ///            parser.LoadXml(&quot;xxe.xml&quot;);
        ///        }
        ///
        ///  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidUsingXmlDocumentWithoutRestrictionOfXMLExternalEntityReference_Source {
            get {
                return ResourceManager.GetString("AvoidUsingXmlDocumentWithoutRestrictionOfXMLExternalEntityReference_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml;
        ///
        ///namespace UnitTests.TestSources
        ///{
        ///    public class AvoidUsingXmlTextReaderWithoutRestrictionOfXMLExternalEntityReference_Source
        ///    {
        ///        public void func()
        ///        {
        ///            // .NET Framework &lt; 4.5.2
        ///            XmlTextReader reader = new XmlTextReader(&quot;xxe.xml&quot;); // VIOLATION: XmlTextReader is not safe by default
        ///            while (reader.Read())
        ///   [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidUsingXmlTextReaderWithoutRestrictionOfXMLExternalEntityReference_Source {
            get {
                return ResourceManager.GetString("AvoidUsingXmlTextReaderWithoutRestrictionOfXMLExternalEntityReference_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Xml;
        ///using System.Xml.XPath;
        ///
        ///
        ///namespace UnitTests.TestSources
        ///{
        ///    public class AvoidUsingXPathNavigatorWithoutRestrictionOfXMLExternalEntityReference_Source
        ///    {
        ///
        ///        public void function()
        ///        {
        ///            XPathDocument doc = new XPathDocument(&quot;example.xml&quot;);
        ///            XPathNavigator nav = doc.CreateNavigator();
        ///            string xml = nav.InnerX [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AvoidUsingXPathNavigatorWithoutRestrictionOfXMLExternalEntityReference_Source {
            get {
                return ResourceManager.GetString("AvoidUsingXPathNavigatorWithoutRestrictionOfXMLExternalEntityReference_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class ChildClassFieldsShouldNotShadowParentClassFields_Source {
        ///
        ///      class Base {
        ///         protected int ripe;
        ///         protected int flesh;
        ///      }
        ///
        ///      class Derived : Base {
        ///         private bool ripe; // Noncompliant
        ///         private static int FLESH; // Noncompliant
        ///
        ///         private bool ripened;
        ///         private static char FLESH_COL [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string ChildClassFieldsShouldNotShadowParentClassFields_Source {
            get {
                return ResourceManager.GetString("ChildClassFieldsShouldNotShadowParentClassFields_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class ClassesImplementingIEquatableTShouldBeSealed_Source {
        ///
        ///      public class UnSealedEqualsVirtual : IEquatable&lt;int&gt; {
        ///         public virtual bool Equals(int i) {
        ///            return false;
        ///         }
        ///      }
        ///
        ///      public class UnSealedDerviedFromUnSealedEqualsVirtual : UnSealedEqualsVirtual {
        ///         public override bool E [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string ClassesImplementingIEquatableTShouldBeSealed_Source {
            get {
                return ResourceManager.GetString("ClassesImplementingIEquatableTShouldBeSealed_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Globalization;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class CultureDependentStringOperationsShouldSpecifyCulture_Source {
        ///      private static readonly String str = &quot;abc&quot;;
        ///      String lowerKO = str.ToLower();
        ///      String lowerOK = str.ToLower(CultureInfo.InvariantCulture);
        ///      String lowerOKInvariant = str.ToLowerInvariant();
        ///
        ///      String upperKO = st [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CultureDependentStringOperationsShouldSpecifyCulture_Source {
            get {
                return ResourceManager.GetString("CultureDependentStringOperationsShouldSpecifyCulture_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class EmptyArraysAndCollectionsShouldBeReturnedInsteadOfNull_Source {
        ///      class Result {
        ///
        ///      }
        ///
        ///      class KO {
        ///         public Result[] GetResultsReturnArray() {
        ///            return null; // Noncompliant
        ///         }
        ///
        ///         public IEnumerable&lt;Result&gt; GetResultsReturnIEnumerable() {
        ///            return null; // Noncomplia [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string EmptyArraysAndCollectionsShouldBeReturnedInsteadOfNull_Source {
            get {
                return ResourceManager.GetString("EmptyArraysAndCollectionsShouldBeReturnedInsteadOfNull_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Runtime.Serialization;
        ///using System.Security.Permissions;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///
        ///   [Serializable]
        ///   class SerializedKO1 : ISerializable
        ///   {
        ///
        ///      [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted = true)]
        ///      SerializedKO1() {
        ///      }
        ///
        ///      protected SerializedKO1(SerializationInfo info, StreamingContext context) { // Noncom [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string EnsureConstructorsOfSerializableClassesAreSecure_Source {
            get {
                return ResourceManager.GetString("EnsureConstructorsOfSerializableClassesAreSecure_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class EnsureProperArgumentsToEvents_Source {
        ///
        ///      public class Klass1 {
        ///         public event EventHandler foo;
        ///
        ///         protected virtual void OnTfoo(EventArgs e) {
        ///            foo?.Invoke(null, e); // Violation
        ///         }
        ///      }
        ///
        ///      public class Klass2 {
        ///         public static event EventHandler foo;
        ///
        ///         prote [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string EnsureProperArgumentsToEvents_Source {
            get {
                return ResourceManager.GetString("EnsureProperArgumentsToEvents_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Runtime.Serialization;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///   public class EnsureSerializableTypesFollowBestPractices_Source
        ///   {
        ///      private class SerializableAttributeKO : ISerializable // Violation: No Serializable attribute
        ///      {
        ///         protected SerializableAttributeKO(SerializationInfo info, StreamingContext context) { }
        ///         public virtual void G [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string EnsureSerializableTypesFollowBestPractices_Source {
            get {
                return ResourceManager.GetString("EnsureSerializableTypesFollowBestPractices_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///   public class ForLoopConditionShouldBeInvariant_Source
        ///   {
        ///
        ///      void FuncI(int i) {
        ///         ++i;
        ///      }
        ///
        ///      void ForLoopConditionInvariantOK() {
        ///         for (int i = 0; i &lt; 10; ++i) {
        ///            FuncI(i);
        ///         }
        ///
        ///         for (int i = 0; i &lt; 10; ++i) {
        ///            Console.WriteLine(i);
        ///         }
        ///
        ///         int j =  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string ForLoopConditionShouldBeInvariant_Source {
            get {
                return ResourceManager.GetString("ForLoopConditionShouldBeInvariant_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class InheritedMemberVisibilityShouldNotBeDecreased_Source {
        ///
        ///      public class Base {
        ///         public virtual void VirtualMethod() { }
        ///         public void BaseMethod(int x) { }
        ///      }
        ///
        ///      public class Foo  : Base {
        ///         public override void VirtualMethod() { }
        ///         public void SomeMethod(int count) { }
        ///         p [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string InheritedMemberVisibilityShouldNotBeDecreased_Source {
            get {
                return ResourceManager.GetString("InheritedMemberVisibilityShouldNotBeDecreased_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class InterfaceInstancesShouldNotBeCastToConcreteTypes_Source {
        ///      interface BaseInterface {
        ///         void BaseInterfaceMethod();
        ///      }
        ///
        ///      interface DerivedInterface : BaseInterface {
        ///         void DerivedInterfaceMethod();
        ///      }
        ///
        ///      abstract class AbstractClass : DerivedInterface {
        ///         public abstract void B [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string InterfaceInstancesShouldNotBeCastToConcreteTypes_Source {
            get {
                return ResourceManager.GetString("InterfaceInstancesShouldNotBeCastToConcreteTypes_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Security;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///
        ///   public class MembersOfLargerScopeElementShouldNotHaveConflictingTransparencyAnnotations_Source
        ///   {
        ///
        ///      [SecurityCritical]
        ///      public class CriticalClass
        ///      {
        ///         // CA2136 violation - this method is not really safe critical, since the larger scoped type annotation
        ///         // has precidence over t [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string MembersOfLargerScopeElementShouldNotHaveConflictingTransparencyAnnotations_Source {
            get {
                return ResourceManager.GetString("MembersOfLargerScopeElementShouldNotHaveConflictingTransparencyAnnotations_Source" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///   public class MergeAdjacentTryBlocksWithIdenticalCatchFinallyStatements_Source
        ///   {
        ///      void DoFirstThing() { }
        ///
        ///      void DoSecondThing() { }
        ///
        ///      void DoThirdThing() { }
        ///
        ///      void DoFourthThing() { }
        ///
        ///      void DoThingInCatch() { }
        ///
        ///      void TryIdenticalCatchKO() {
        ///         try {
        ///            DoFirstThing();
        ///
        ///         [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string MergeAdjacentTryBlocksWithIdenticalCatchFinallyStatements_Source {
            get {
                return ResourceManager.GetString("MergeAdjacentTryBlocksWithIdenticalCatchFinallyStatements_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///using System.Collections.ObjectModel;
        ///using System.Collections.Immutable;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class MutableStaticFieldsOfTypeCollectionOrArrayShouldNotBePublicStatic_Source {
        ///
        ///      public class AClass {
        ///         public static string[] strings1KO = { &quot;first&quot;, &quot;second&quot; };  // Noncompliant
        ///         public static List&lt;String&gt; strings2KO = new List&lt;String [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string MutableStaticFieldsOfTypeCollectionOrArrayShouldNotBePublicStatic_Source {
            get {
                return ResourceManager.GetString("MutableStaticFieldsOfTypeCollectionOrArrayShouldNotBePublicStatic_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources
        ///{
        ///   public class RecursionShouldNotBeInfinite_Source
        ///   {
        ///      #region RecursiveIfElse
        ///      void RecursiveIfElseKO1(int i)
        ///      {
        ///         if (i &gt;= 0) {
        ///            RecursiveIfElseKO1(i--);
        ///         } else if (10 == i) {
        ///            RecursiveIfElseKO1(i += 2);
        ///         } else {
        ///            RecursiveIfElseKO1(--i);
        ///         }
        ///      } [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string RecursionShouldNotBeInfinite_Source {
            get {
                return ResourceManager.GetString("RecursionShouldNotBeInfinite_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class TrackFIXMETags_Source {
        ///      // FIXME
        ///      // FIXME too.
        ///      // NOT FIXME
        ///      /* FIXME Again */
        ///      /* Not Fixme */
        ///      /* fixme */
        ///   }
        ///}
        ///.
        /// </summary>
        internal static string TrackFIXMETags_Source {
            get {
                return ResourceManager.GetString("TrackFIXMETags_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class TrackTODOTags_Source {
        ///      //TODO this
        ///      // TODO that
        ///      // Not TODO
        ///      /* TODO this again */
        ///      /*todo THAT again*/
        ///      /* NOT TODO */
        ///
        ///      /// TODO &lt;summary&gt;
        ///      /// 
        ///      /// &lt;/summary&gt;
        ///      void Test() {
        ///
        ///      }
        ///   }
        ///}
        ///.
        /// </summary>
        internal static string TrackTODOTags_Source {
            get {
                return ResourceManager.GetString("TrackTODOTags_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Threading.Tasks;
        ///
        ///namespace UnitTests.UnitTest.Sources {
        ///   public class UseLogicalORInsteadOfBitwiseORInBooleanContext_Source {
        ///
        ///      private bool ReturnTrue() {
        ///         return true;
        ///      }
        ///
        ///      private bool ReturnFalse() {
        ///         return false;
        ///      }
        ///
        ///      private int Return1() {
        ///         return 1;
        ///      }
        ///
        ///      private int Return0() {
        ///         return 0;
        ///      }
        ///
        ///      publ [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string UseLogicalORInsteadOfBitwiseORInBooleanContext_Source {
            get {
                return ResourceManager.GetString("UseLogicalORInsteadOfBitwiseORInBooleanContext_Source", resourceCulture);
            }
        }
    }
}
